// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#include "market_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDataMessage_market_5fdata_2eproto;
namespace ctp {
class MarketDataMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataMessage> _instance;
} _MarketDataMessage_default_instance_;
class MarketDataBatchMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MarketDataBatchMessage> _instance;
} _MarketDataBatchMessage_default_instance_;
}  // namespace ctp
static void InitDefaultsscc_info_MarketDataBatchMessage_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_MarketDataBatchMessage_default_instance_;
    new (ptr) ::ctp::MarketDataBatchMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::MarketDataBatchMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MarketDataBatchMessage_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MarketDataBatchMessage_market_5fdata_2eproto}, {
      &scc_info_MarketDataMessage_market_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_MarketDataMessage_market_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_MarketDataMessage_default_instance_;
    new (ptr) ::ctp::MarketDataMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::MarketDataMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MarketDataMessage_market_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MarketDataMessage_market_5fdata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_market_5fdata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_market_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_market_5fdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_market_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, exchange_inst_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, last_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, pre_close_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, pre_open_interest_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, open_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, highest_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, lowest_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, turnover_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, open_interest_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, close_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, upper_limit_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, lower_limit_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, pre_delta_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, curr_delta_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, update_time_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, update_millisec_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_price1_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_volume1_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_price1_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_volume1_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_price2_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_volume2_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_price2_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_volume2_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_price3_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_volume3_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_price3_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_volume3_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_price4_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_volume4_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_price4_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_volume4_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_price5_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, bid_volume5_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_price5_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, ask_volume5_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, average_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, action_day_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, local_timestamp_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataMessage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataBatchMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataBatchMessage, market_data_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataBatchMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ctp::MarketDataBatchMessage, message_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ctp::MarketDataMessage)},
  { 51, -1, sizeof(::ctp::MarketDataBatchMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctp::_MarketDataMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctp::_MarketDataBatchMessage_default_instance_),
};

const char descriptor_table_protodef_market_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021market_data.proto\022\003ctp\"\371\007\n\021MarketDataM"
  "essage\022\023\n\013trading_day\030\001 \001(\t\022\025\n\rinstrumen"
  "t_id\030\002 \001(\t\022\023\n\013exchange_id\030\003 \001(\t\022\030\n\020excha"
  "nge_inst_id\030\004 \001(\t\022\022\n\nlast_price\030\005 \001(\001\022\034\n"
  "\024pre_settlement_price\030\006 \001(\001\022\027\n\017pre_close"
  "_price\030\007 \001(\001\022\031\n\021pre_open_interest\030\010 \001(\001\022"
  "\022\n\nopen_price\030\t \001(\001\022\025\n\rhighest_price\030\n \001"
  "(\001\022\024\n\014lowest_price\030\013 \001(\001\022\016\n\006volume\030\014 \001(\005"
  "\022\020\n\010turnover\030\r \001(\001\022\025\n\ropen_interest\030\016 \001("
  "\001\022\023\n\013close_price\030\017 \001(\001\022\030\n\020settlement_pri"
  "ce\030\020 \001(\001\022\031\n\021upper_limit_price\030\021 \001(\001\022\031\n\021l"
  "ower_limit_price\030\022 \001(\001\022\021\n\tpre_delta\030\023 \001("
  "\001\022\022\n\ncurr_delta\030\024 \001(\001\022\023\n\013update_time\030\025 \001"
  "(\t\022\027\n\017update_millisec\030\026 \001(\005\022\022\n\nbid_price"
  "1\030\027 \001(\001\022\023\n\013bid_volume1\030\030 \001(\005\022\022\n\nask_pric"
  "e1\030\031 \001(\001\022\023\n\013ask_volume1\030\032 \001(\005\022\022\n\nbid_pri"
  "ce2\030\033 \001(\001\022\023\n\013bid_volume2\030\034 \001(\005\022\022\n\nask_pr"
  "ice2\030\035 \001(\001\022\023\n\013ask_volume2\030\036 \001(\005\022\022\n\nbid_p"
  "rice3\030\037 \001(\001\022\023\n\013bid_volume3\030  \001(\005\022\022\n\nask_"
  "price3\030! \001(\001\022\023\n\013ask_volume3\030\" \001(\005\022\022\n\nbid"
  "_price4\030# \001(\001\022\023\n\013bid_volume4\030$ \001(\005\022\022\n\nas"
  "k_price4\030% \001(\001\022\023\n\013ask_volume4\030& \001(\005\022\022\n\nb"
  "id_price5\030\' \001(\001\022\023\n\013bid_volume5\030( \001(\005\022\022\n\n"
  "ask_price5\030) \001(\001\022\023\n\013ask_volume5\030* \001(\005\022\025\n"
  "\raverage_price\030+ \001(\001\022\022\n\naction_day\030, \001(\t"
  "\022\027\n\017local_timestamp\030- \001(\t\022\021\n\ttimestamp\030."
  " \001(\003\"n\n\026MarketDataBatchMessage\022+\n\013market"
  "_data\030\001 \003(\0132\026.ctp.MarketDataMessage\022\021\n\tt"
  "imestamp\030\002 \001(\003\022\024\n\014message_type\030\003 \001(\tb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_market_5fdata_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_market_5fdata_2eproto_sccs[2] = {
  &scc_info_MarketDataBatchMessage_market_5fdata_2eproto.base,
  &scc_info_MarketDataMessage_market_5fdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_market_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto = {
  false, false, descriptor_table_protodef_market_5fdata_2eproto, "market_data.proto", 1164,
  &descriptor_table_market_5fdata_2eproto_once, descriptor_table_market_5fdata_2eproto_sccs, descriptor_table_market_5fdata_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_market_5fdata_2eproto::offsets,
  file_level_metadata_market_5fdata_2eproto, 2, file_level_enum_descriptors_market_5fdata_2eproto, file_level_service_descriptors_market_5fdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_market_5fdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_market_5fdata_2eproto)), true);
namespace ctp {

// ===================================================================

void MarketDataMessage::InitAsDefaultInstance() {
}
class MarketDataMessage::_Internal {
 public:
};

MarketDataMessage::MarketDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctp.MarketDataMessage)
}
MarketDataMessage::MarketDataMessage(const MarketDataMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_day(),
      GetArena());
  }
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_inst_id().empty()) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_inst_id(),
      GetArena());
  }
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_update_time().empty()) {
    update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_update_time(),
      GetArena());
  }
  action_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action_day().empty()) {
    action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_action_day(),
      GetArena());
  }
  local_timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_timestamp().empty()) {
    local_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_timestamp(),
      GetArena());
  }
  ::memcpy(&last_price_, &from.last_price_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&last_price_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:ctp.MarketDataMessage)
}

void MarketDataMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataMessage_market_5fdata_2eproto.base);
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(timestamp_));
}

MarketDataMessage::~MarketDataMessage() {
  // @@protoc_insertion_point(destructor:ctp.MarketDataMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDataMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDataMessage::ArenaDtor(void* object) {
  MarketDataMessage* _this = reinterpret_cast< MarketDataMessage* >(object);
  (void)_this;
}
void MarketDataMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDataMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataMessage& MarketDataMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataMessage_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MarketDataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.MarketDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_inst_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&last_price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&last_price_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string trading_day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.trading_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_inst_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchange_inst_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.exchange_inst_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double last_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          last_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_close_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          pre_close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_open_interest = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          pre_open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open_price = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          open_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double highest_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          highest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lowest_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          lowest_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 volume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double turnover = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          turnover_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double open_interest = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_price = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          close_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double settlement_price = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double upper_limit_price = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          upper_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lower_limit_price = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          lower_limit_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_delta = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          pre_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double curr_delta = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          curr_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string update_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_update_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.update_time"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 update_millisec = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          update_millisec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price1 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          bid_price1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume1 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          bid_volume1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price1 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          ask_price1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume1 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ask_volume1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price2 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          bid_price2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume2 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          bid_volume2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price2 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          ask_price2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume2 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ask_volume2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price3 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          bid_price3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume3 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          bid_volume3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price3 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ask_price3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume3 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ask_volume3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price4 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          bid_price4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume4 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bid_volume4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price4 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ask_price4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume4 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ask_volume4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double bid_price5 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          bid_price5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 bid_volume5 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          bid_volume5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ask_price5 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          ask_price5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 ask_volume5 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ask_volume5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double average_price = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          average_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string action_day = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_action_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.action_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_timestamp = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_local_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataMessage.local_timestamp"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctp.MarketDataMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string trading_day = 1;
  if (this->trading_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.trading_day");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trading_day(), target);
  }

  // string instrument_id = 2;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.instrument_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instrument_id(), target);
  }

  // string exchange_id = 3;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.exchange_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exchange_id(), target);
  }

  // string exchange_inst_id = 4;
  if (this->exchange_inst_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_inst_id().data(), static_cast<int>(this->_internal_exchange_inst_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.exchange_inst_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchange_inst_id(), target);
  }

  // double last_price = 5;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_last_price(), target);
  }

  // double pre_settlement_price = 6;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_pre_settlement_price(), target);
  }

  // double pre_close_price = 7;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_pre_close_price(), target);
  }

  // double pre_open_interest = 8;
  if (!(this->pre_open_interest() <= 0 && this->pre_open_interest() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_pre_open_interest(), target);
  }

  // double open_price = 9;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_open_price(), target);
  }

  // double highest_price = 10;
  if (!(this->highest_price() <= 0 && this->highest_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_highest_price(), target);
  }

  // double lowest_price = 11;
  if (!(this->lowest_price() <= 0 && this->lowest_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_lowest_price(), target);
  }

  // int32 volume = 12;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_volume(), target);
  }

  // double turnover = 13;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_turnover(), target);
  }

  // double open_interest = 14;
  if (!(this->open_interest() <= 0 && this->open_interest() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_open_interest(), target);
  }

  // double close_price = 15;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_close_price(), target);
  }

  // double settlement_price = 16;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_settlement_price(), target);
  }

  // double upper_limit_price = 17;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_upper_limit_price(), target);
  }

  // double lower_limit_price = 18;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lower_limit_price(), target);
  }

  // double pre_delta = 19;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_pre_delta(), target);
  }

  // double curr_delta = 20;
  if (!(this->curr_delta() <= 0 && this->curr_delta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_curr_delta(), target);
  }

  // string update_time = 21;
  if (this->update_time().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_update_time().data(), static_cast<int>(this->_internal_update_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.update_time");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_update_time(), target);
  }

  // int32 update_millisec = 22;
  if (this->update_millisec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_update_millisec(), target);
  }

  // double bid_price1 = 23;
  if (!(this->bid_price1() <= 0 && this->bid_price1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_bid_price1(), target);
  }

  // int32 bid_volume1 = 24;
  if (this->bid_volume1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_bid_volume1(), target);
  }

  // double ask_price1 = 25;
  if (!(this->ask_price1() <= 0 && this->ask_price1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ask_price1(), target);
  }

  // int32 ask_volume1 = 26;
  if (this->ask_volume1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_ask_volume1(), target);
  }

  // double bid_price2 = 27;
  if (!(this->bid_price2() <= 0 && this->bid_price2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_bid_price2(), target);
  }

  // int32 bid_volume2 = 28;
  if (this->bid_volume2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_bid_volume2(), target);
  }

  // double ask_price2 = 29;
  if (!(this->ask_price2() <= 0 && this->ask_price2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_ask_price2(), target);
  }

  // int32 ask_volume2 = 30;
  if (this->ask_volume2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_ask_volume2(), target);
  }

  // double bid_price3 = 31;
  if (!(this->bid_price3() <= 0 && this->bid_price3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_bid_price3(), target);
  }

  // int32 bid_volume3 = 32;
  if (this->bid_volume3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_bid_volume3(), target);
  }

  // double ask_price3 = 33;
  if (!(this->ask_price3() <= 0 && this->ask_price3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_ask_price3(), target);
  }

  // int32 ask_volume3 = 34;
  if (this->ask_volume3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_ask_volume3(), target);
  }

  // double bid_price4 = 35;
  if (!(this->bid_price4() <= 0 && this->bid_price4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_bid_price4(), target);
  }

  // int32 bid_volume4 = 36;
  if (this->bid_volume4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_bid_volume4(), target);
  }

  // double ask_price4 = 37;
  if (!(this->ask_price4() <= 0 && this->ask_price4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_ask_price4(), target);
  }

  // int32 ask_volume4 = 38;
  if (this->ask_volume4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_ask_volume4(), target);
  }

  // double bid_price5 = 39;
  if (!(this->bid_price5() <= 0 && this->bid_price5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_bid_price5(), target);
  }

  // int32 bid_volume5 = 40;
  if (this->bid_volume5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_bid_volume5(), target);
  }

  // double ask_price5 = 41;
  if (!(this->ask_price5() <= 0 && this->ask_price5() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_ask_price5(), target);
  }

  // int32 ask_volume5 = 42;
  if (this->ask_volume5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_ask_volume5(), target);
  }

  // double average_price = 43;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_average_price(), target);
  }

  // string action_day = 44;
  if (this->action_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action_day().data(), static_cast<int>(this->_internal_action_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.action_day");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_action_day(), target);
  }

  // string local_timestamp = 45;
  if (this->local_timestamp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_timestamp().data(), static_cast<int>(this->_internal_local_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataMessage.local_timestamp");
    target = stream->WriteStringMaybeAliased(
        45, this->_internal_local_timestamp(), target);
  }

  // int64 timestamp = 46;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(46, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.MarketDataMessage)
  return target;
}

size_t MarketDataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.MarketDataMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trading_day = 1;
  if (this->trading_day().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string instrument_id = 2;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string exchange_id = 3;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string exchange_inst_id = 4;
  if (this->exchange_inst_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_inst_id());
  }

  // string update_time = 21;
  if (this->update_time().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_update_time());
  }

  // string action_day = 44;
  if (this->action_day().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_day());
  }

  // string local_timestamp = 45;
  if (this->local_timestamp().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_timestamp());
  }

  // double last_price = 5;
  if (!(this->last_price() <= 0 && this->last_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_settlement_price = 6;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_close_price = 7;
  if (!(this->pre_close_price() <= 0 && this->pre_close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double pre_open_interest = 8;
  if (!(this->pre_open_interest() <= 0 && this->pre_open_interest() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_price = 9;
  if (!(this->open_price() <= 0 && this->open_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double highest_price = 10;
  if (!(this->highest_price() <= 0 && this->highest_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double lowest_price = 11;
  if (!(this->lowest_price() <= 0 && this->lowest_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double turnover = 13;
  if (!(this->turnover() <= 0 && this->turnover() >= 0)) {
    total_size += 1 + 8;
  }

  // double open_interest = 14;
  if (!(this->open_interest() <= 0 && this->open_interest() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_price = 15;
  if (!(this->close_price() <= 0 && this->close_price() >= 0)) {
    total_size += 1 + 8;
  }

  // double settlement_price = 16;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double upper_limit_price = 17;
  if (!(this->upper_limit_price() <= 0 && this->upper_limit_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 volume = 12;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume());
  }

  // int32 update_millisec = 22;
  if (this->update_millisec() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_update_millisec());
  }

  // double lower_limit_price = 18;
  if (!(this->lower_limit_price() <= 0 && this->lower_limit_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_delta = 19;
  if (!(this->pre_delta() <= 0 && this->pre_delta() >= 0)) {
    total_size += 2 + 8;
  }

  // double curr_delta = 20;
  if (!(this->curr_delta() <= 0 && this->curr_delta() >= 0)) {
    total_size += 2 + 8;
  }

  // double bid_price1 = 23;
  if (!(this->bid_price1() <= 0 && this->bid_price1() >= 0)) {
    total_size += 2 + 8;
  }

  // double ask_price1 = 25;
  if (!(this->ask_price1() <= 0 && this->ask_price1() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bid_volume1 = 24;
  if (this->bid_volume1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume1());
  }

  // int32 ask_volume1 = 26;
  if (this->ask_volume1() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume1());
  }

  // double bid_price2 = 27;
  if (!(this->bid_price2() <= 0 && this->bid_price2() >= 0)) {
    total_size += 2 + 8;
  }

  // double ask_price2 = 29;
  if (!(this->ask_price2() <= 0 && this->ask_price2() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bid_volume2 = 28;
  if (this->bid_volume2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume2());
  }

  // int32 ask_volume2 = 30;
  if (this->ask_volume2() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume2());
  }

  // double bid_price3 = 31;
  if (!(this->bid_price3() <= 0 && this->bid_price3() >= 0)) {
    total_size += 2 + 8;
  }

  // double ask_price3 = 33;
  if (!(this->ask_price3() <= 0 && this->ask_price3() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bid_volume3 = 32;
  if (this->bid_volume3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume3());
  }

  // int32 ask_volume3 = 34;
  if (this->ask_volume3() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume3());
  }

  // double bid_price4 = 35;
  if (!(this->bid_price4() <= 0 && this->bid_price4() >= 0)) {
    total_size += 2 + 8;
  }

  // double ask_price4 = 37;
  if (!(this->ask_price4() <= 0 && this->ask_price4() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bid_volume4 = 36;
  if (this->bid_volume4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume4());
  }

  // int32 ask_volume4 = 38;
  if (this->ask_volume4() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume4());
  }

  // double bid_price5 = 39;
  if (!(this->bid_price5() <= 0 && this->bid_price5() >= 0)) {
    total_size += 2 + 8;
  }

  // double ask_price5 = 41;
  if (!(this->ask_price5() <= 0 && this->ask_price5() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 bid_volume5 = 40;
  if (this->bid_volume5() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bid_volume5());
  }

  // int32 ask_volume5 = 42;
  if (this->ask_volume5() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ask_volume5());
  }

  // double average_price = 43;
  if (!(this->average_price() <= 0 && this->average_price() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 timestamp = 46;
  if (this->timestamp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.MarketDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.MarketDataMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.MarketDataMessage)
    MergeFrom(*source);
  }
}

void MarketDataMessage::MergeFrom(const MarketDataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.MarketDataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trading_day().size() > 0) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.exchange_inst_id().size() > 0) {
    _internal_set_exchange_inst_id(from._internal_exchange_inst_id());
  }
  if (from.update_time().size() > 0) {
    _internal_set_update_time(from._internal_update_time());
  }
  if (from.action_day().size() > 0) {
    _internal_set_action_day(from._internal_action_day());
  }
  if (from.local_timestamp().size() > 0) {
    _internal_set_local_timestamp(from._internal_local_timestamp());
  }
  if (!(from.last_price() <= 0 && from.last_price() >= 0)) {
    _internal_set_last_price(from._internal_last_price());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    _internal_set_pre_settlement_price(from._internal_pre_settlement_price());
  }
  if (!(from.pre_close_price() <= 0 && from.pre_close_price() >= 0)) {
    _internal_set_pre_close_price(from._internal_pre_close_price());
  }
  if (!(from.pre_open_interest() <= 0 && from.pre_open_interest() >= 0)) {
    _internal_set_pre_open_interest(from._internal_pre_open_interest());
  }
  if (!(from.open_price() <= 0 && from.open_price() >= 0)) {
    _internal_set_open_price(from._internal_open_price());
  }
  if (!(from.highest_price() <= 0 && from.highest_price() >= 0)) {
    _internal_set_highest_price(from._internal_highest_price());
  }
  if (!(from.lowest_price() <= 0 && from.lowest_price() >= 0)) {
    _internal_set_lowest_price(from._internal_lowest_price());
  }
  if (!(from.turnover() <= 0 && from.turnover() >= 0)) {
    _internal_set_turnover(from._internal_turnover());
  }
  if (!(from.open_interest() <= 0 && from.open_interest() >= 0)) {
    _internal_set_open_interest(from._internal_open_interest());
  }
  if (!(from.close_price() <= 0 && from.close_price() >= 0)) {
    _internal_set_close_price(from._internal_close_price());
  }
  if (!(from.settlement_price() <= 0 && from.settlement_price() >= 0)) {
    _internal_set_settlement_price(from._internal_settlement_price());
  }
  if (!(from.upper_limit_price() <= 0 && from.upper_limit_price() >= 0)) {
    _internal_set_upper_limit_price(from._internal_upper_limit_price());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
  if (from.update_millisec() != 0) {
    _internal_set_update_millisec(from._internal_update_millisec());
  }
  if (!(from.lower_limit_price() <= 0 && from.lower_limit_price() >= 0)) {
    _internal_set_lower_limit_price(from._internal_lower_limit_price());
  }
  if (!(from.pre_delta() <= 0 && from.pre_delta() >= 0)) {
    _internal_set_pre_delta(from._internal_pre_delta());
  }
  if (!(from.curr_delta() <= 0 && from.curr_delta() >= 0)) {
    _internal_set_curr_delta(from._internal_curr_delta());
  }
  if (!(from.bid_price1() <= 0 && from.bid_price1() >= 0)) {
    _internal_set_bid_price1(from._internal_bid_price1());
  }
  if (!(from.ask_price1() <= 0 && from.ask_price1() >= 0)) {
    _internal_set_ask_price1(from._internal_ask_price1());
  }
  if (from.bid_volume1() != 0) {
    _internal_set_bid_volume1(from._internal_bid_volume1());
  }
  if (from.ask_volume1() != 0) {
    _internal_set_ask_volume1(from._internal_ask_volume1());
  }
  if (!(from.bid_price2() <= 0 && from.bid_price2() >= 0)) {
    _internal_set_bid_price2(from._internal_bid_price2());
  }
  if (!(from.ask_price2() <= 0 && from.ask_price2() >= 0)) {
    _internal_set_ask_price2(from._internal_ask_price2());
  }
  if (from.bid_volume2() != 0) {
    _internal_set_bid_volume2(from._internal_bid_volume2());
  }
  if (from.ask_volume2() != 0) {
    _internal_set_ask_volume2(from._internal_ask_volume2());
  }
  if (!(from.bid_price3() <= 0 && from.bid_price3() >= 0)) {
    _internal_set_bid_price3(from._internal_bid_price3());
  }
  if (!(from.ask_price3() <= 0 && from.ask_price3() >= 0)) {
    _internal_set_ask_price3(from._internal_ask_price3());
  }
  if (from.bid_volume3() != 0) {
    _internal_set_bid_volume3(from._internal_bid_volume3());
  }
  if (from.ask_volume3() != 0) {
    _internal_set_ask_volume3(from._internal_ask_volume3());
  }
  if (!(from.bid_price4() <= 0 && from.bid_price4() >= 0)) {
    _internal_set_bid_price4(from._internal_bid_price4());
  }
  if (!(from.ask_price4() <= 0 && from.ask_price4() >= 0)) {
    _internal_set_ask_price4(from._internal_ask_price4());
  }
  if (from.bid_volume4() != 0) {
    _internal_set_bid_volume4(from._internal_bid_volume4());
  }
  if (from.ask_volume4() != 0) {
    _internal_set_ask_volume4(from._internal_ask_volume4());
  }
  if (!(from.bid_price5() <= 0 && from.bid_price5() >= 0)) {
    _internal_set_bid_price5(from._internal_bid_price5());
  }
  if (!(from.ask_price5() <= 0 && from.ask_price5() >= 0)) {
    _internal_set_ask_price5(from._internal_ask_price5());
  }
  if (from.bid_volume5() != 0) {
    _internal_set_bid_volume5(from._internal_bid_volume5());
  }
  if (from.ask_volume5() != 0) {
    _internal_set_ask_volume5(from._internal_ask_volume5());
  }
  if (!(from.average_price() <= 0 && from.average_price() >= 0)) {
    _internal_set_average_price(from._internal_average_price());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MarketDataMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.MarketDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataMessage::CopyFrom(const MarketDataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.MarketDataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataMessage::IsInitialized() const {
  return true;
}

void MarketDataMessage::InternalSwap(MarketDataMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trading_day_.Swap(&other->trading_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_inst_id_.Swap(&other->exchange_inst_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  update_time_.Swap(&other->update_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  action_day_.Swap(&other->action_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_timestamp_.Swap(&other->local_timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDataMessage, timestamp_)
      + sizeof(MarketDataMessage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MarketDataMessage, last_price_)>(
          reinterpret_cast<char*>(&last_price_),
          reinterpret_cast<char*>(&other->last_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MarketDataBatchMessage::InitAsDefaultInstance() {
}
class MarketDataBatchMessage::_Internal {
 public:
};

MarketDataBatchMessage::MarketDataBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  market_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctp.MarketDataBatchMessage)
}
MarketDataBatchMessage::MarketDataBatchMessage(const MarketDataBatchMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      market_data_(from.market_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_type(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ctp.MarketDataBatchMessage)
}

void MarketDataBatchMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MarketDataBatchMessage_market_5fdata_2eproto.base);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

MarketDataBatchMessage::~MarketDataBatchMessage() {
  // @@protoc_insertion_point(destructor:ctp.MarketDataBatchMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MarketDataBatchMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MarketDataBatchMessage::ArenaDtor(void* object) {
  MarketDataBatchMessage* _this = reinterpret_cast< MarketDataBatchMessage* >(object);
  (void)_this;
}
void MarketDataBatchMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MarketDataBatchMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MarketDataBatchMessage& MarketDataBatchMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MarketDataBatchMessage_market_5fdata_2eproto.base);
  return *internal_default_instance();
}


void MarketDataBatchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.MarketDataBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  market_data_.Clear();
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDataBatchMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ctp.MarketDataMessage market_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_market_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.MarketDataBatchMessage.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MarketDataBatchMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctp.MarketDataBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ctp.MarketDataMessage market_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_market_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_market_data(i), target, stream);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.MarketDataBatchMessage.message_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.MarketDataBatchMessage)
  return target;
}

size_t MarketDataBatchMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.MarketDataBatchMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ctp.MarketDataMessage market_data = 1;
  total_size += 1UL * this->_internal_market_data_size();
  for (const auto& msg : this->market_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketDataBatchMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.MarketDataBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketDataBatchMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MarketDataBatchMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.MarketDataBatchMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.MarketDataBatchMessage)
    MergeFrom(*source);
  }
}

void MarketDataBatchMessage::MergeFrom(const MarketDataBatchMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.MarketDataBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  market_data_.MergeFrom(from.market_data_);
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void MarketDataBatchMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.MarketDataBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataBatchMessage::CopyFrom(const MarketDataBatchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.MarketDataBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataBatchMessage::IsInitialized() const {
  return true;
}

void MarketDataBatchMessage::InternalSwap(MarketDataBatchMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  market_data_.InternalSwap(&other->market_data_);
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDataBatchMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ctp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ctp::MarketDataMessage* Arena::CreateMaybeMessage< ::ctp::MarketDataMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctp::MarketDataMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ctp::MarketDataBatchMessage* Arena::CreateMaybeMessage< ::ctp::MarketDataBatchMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctp::MarketDataBatchMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
