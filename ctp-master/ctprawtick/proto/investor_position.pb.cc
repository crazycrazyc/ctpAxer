// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/investor_position.proto

#include "investor_position.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2finvestor_5fposition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto;
namespace ctp {
class InvestorPositionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvestorPositionMessage> _instance;
} _InvestorPositionMessage_default_instance_;
class InvestorPositionBatchMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvestorPositionBatchMessage> _instance;
} _InvestorPositionBatchMessage_default_instance_;
}  // namespace ctp
static void InitDefaultsscc_info_InvestorPositionBatchMessage_proto_2finvestor_5fposition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_InvestorPositionBatchMessage_default_instance_;
    new (ptr) ::ctp::InvestorPositionBatchMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::InvestorPositionBatchMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InvestorPositionBatchMessage_proto_2finvestor_5fposition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InvestorPositionBatchMessage_proto_2finvestor_5fposition_2eproto}, {
      &scc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto.base,}};

static void InitDefaultsscc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_InvestorPositionMessage_default_instance_;
    new (ptr) ::ctp::InvestorPositionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::InvestorPositionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2finvestor_5fposition_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2finvestor_5fposition_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2finvestor_5fposition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2finvestor_5fposition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, broker_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, investor_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, posi_direction_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, hedge_flag_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, position_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, yd_position_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, position_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, long_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, short_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, long_frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, short_frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, open_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, close_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, open_amount_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, close_amount_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, position_cost_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, pre_margin_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, use_margin_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, frozen_margin_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, frozen_cash_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, frozen_commission_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, cash_in_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, commission_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, close_profit_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, position_profit_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, pre_settlement_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, settlement_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, trading_day_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, settlement_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, open_cost_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, exchange_margin_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, comb_position_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, comb_long_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, comb_short_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, close_profit_by_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, close_profit_by_trade_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, today_position_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, margin_rate_by_money_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, margin_rate_by_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, strike_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, strike_frozen_amount_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, abandon_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, yd_strike_frozen_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, invest_unit_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionMessage, position_cost_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionBatchMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionBatchMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionBatchMessage, message_type_),
  PROTOBUF_FIELD_OFFSET(::ctp::InvestorPositionBatchMessage, positions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ctp::InvestorPositionMessage)},
  { 52, -1, sizeof(::ctp::InvestorPositionBatchMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctp::_InvestorPositionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctp::_InvestorPositionBatchMessage_default_instance_),
};

const char descriptor_table_protodef_proto_2finvestor_5fposition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035proto/investor_position.proto\022\003ctp\"\366\010\n"
  "\027InvestorPositionMessage\022\025\n\rinstrument_i"
  "d\030\001 \001(\t\022\021\n\tbroker_id\030\002 \001(\t\022\023\n\013investor_i"
  "d\030\003 \001(\t\022\026\n\016posi_direction\030\004 \001(\t\022\022\n\nhedge"
  "_flag\030\005 \001(\t\022\025\n\rposition_date\030\006 \001(\t\022\023\n\013yd"
  "_position\030\007 \001(\005\022\020\n\010position\030\010 \001(\005\022\023\n\013lon"
  "g_frozen\030\t \001(\005\022\024\n\014short_frozen\030\n \001(\005\022\032\n\022"
  "long_frozen_amount\030\013 \001(\001\022\033\n\023short_frozen"
  "_amount\030\014 \001(\001\022\023\n\013open_volume\030\r \001(\005\022\024\n\014cl"
  "ose_volume\030\016 \001(\005\022\023\n\013open_amount\030\017 \001(\001\022\024\n"
  "\014close_amount\030\020 \001(\001\022\025\n\rposition_cost\030\021 \001"
  "(\001\022\022\n\npre_margin\030\022 \001(\001\022\022\n\nuse_margin\030\023 \001"
  "(\001\022\025\n\rfrozen_margin\030\024 \001(\001\022\023\n\013frozen_cash"
  "\030\025 \001(\001\022\031\n\021frozen_commission\030\026 \001(\001\022\017\n\007cas"
  "h_in\030\027 \001(\001\022\022\n\ncommission\030\030 \001(\001\022\024\n\014close_"
  "profit\030\031 \001(\001\022\027\n\017position_profit\030\032 \001(\001\022\034\n"
  "\024pre_settlement_price\030\033 \001(\001\022\030\n\020settlemen"
  "t_price\030\034 \001(\001\022\023\n\013trading_day\030\035 \001(\t\022\025\n\rse"
  "ttlement_id\030\036 \001(\005\022\021\n\topen_cost\030\037 \001(\001\022\027\n\017"
  "exchange_margin\030  \001(\001\022\025\n\rcomb_position\030!"
  " \001(\005\022\030\n\020comb_long_frozen\030\" \001(\005\022\031\n\021comb_s"
  "hort_frozen\030# \001(\005\022\034\n\024close_profit_by_dat"
  "e\030$ \001(\001\022\035\n\025close_profit_by_trade\030% \001(\001\022\026"
  "\n\016today_position\030& \001(\005\022\034\n\024margin_rate_by"
  "_money\030\' \001(\001\022\035\n\025margin_rate_by_volume\030( "
  "\001(\001\022\025\n\rstrike_frozen\030) \001(\005\022\034\n\024strike_fro"
  "zen_amount\030* \001(\001\022\026\n\016abandon_frozen\030+ \001(\005"
  "\022\023\n\013exchange_id\030, \001(\t\022\030\n\020yd_strike_froze"
  "n\030- \001(\005\022\026\n\016invest_unit_id\030. \001(\t\022\034\n\024posit"
  "ion_cost_offset\030/ \001(\001\"x\n\034InvestorPositio"
  "nBatchMessage\022\021\n\ttimestamp\030\001 \001(\003\022\024\n\014mess"
  "age_type\030\002 \001(\t\022/\n\tpositions\030\003 \003(\0132\034.ctp."
  "InvestorPositionMessageb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2finvestor_5fposition_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2finvestor_5fposition_2eproto_sccs[2] = {
  &scc_info_InvestorPositionBatchMessage_proto_2finvestor_5fposition_2eproto.base,
  &scc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2finvestor_5fposition_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finvestor_5fposition_2eproto = {
  false, false, descriptor_table_protodef_proto_2finvestor_5fposition_2eproto, "proto/investor_position.proto", 1311,
  &descriptor_table_proto_2finvestor_5fposition_2eproto_once, descriptor_table_proto_2finvestor_5fposition_2eproto_sccs, descriptor_table_proto_2finvestor_5fposition_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_proto_2finvestor_5fposition_2eproto::offsets,
  file_level_metadata_proto_2finvestor_5fposition_2eproto, 2, file_level_enum_descriptors_proto_2finvestor_5fposition_2eproto, file_level_service_descriptors_proto_2finvestor_5fposition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2finvestor_5fposition_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2finvestor_5fposition_2eproto)), true);
namespace ctp {

// ===================================================================

void InvestorPositionMessage::InitAsDefaultInstance() {
}
class InvestorPositionMessage::_Internal {
 public:
};

InvestorPositionMessage::InvestorPositionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctp.InvestorPositionMessage)
}
InvestorPositionMessage::InvestorPositionMessage(const InvestorPositionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broker_id().empty()) {
    broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_broker_id(),
      GetArena());
  }
  investor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_investor_id().empty()) {
    investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_investor_id(),
      GetArena());
  }
  posi_direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_posi_direction().empty()) {
    posi_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_posi_direction(),
      GetArena());
  }
  hedge_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hedge_flag().empty()) {
    hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hedge_flag(),
      GetArena());
  }
  position_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_position_date().empty()) {
    position_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_position_date(),
      GetArena());
  }
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trading_day().empty()) {
    trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trading_day(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  invest_unit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_invest_unit_id().empty()) {
    invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_invest_unit_id(),
      GetArena());
  }
  ::memcpy(&yd_position_, &from.yd_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_cost_offset_) -
    reinterpret_cast<char*>(&yd_position_)) + sizeof(position_cost_offset_));
  // @@protoc_insertion_point(copy_constructor:ctp.InvestorPositionMessage)
}

void InvestorPositionMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto.base);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posi_direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hedge_flag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_day_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invest_unit_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&yd_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_cost_offset_) -
      reinterpret_cast<char*>(&yd_position_)) + sizeof(position_cost_offset_));
}

InvestorPositionMessage::~InvestorPositionMessage() {
  // @@protoc_insertion_point(destructor:ctp.InvestorPositionMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvestorPositionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  investor_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  posi_direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hedge_flag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trading_day_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invest_unit_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvestorPositionMessage::ArenaDtor(void* object) {
  InvestorPositionMessage* _this = reinterpret_cast< InvestorPositionMessage* >(object);
  (void)_this;
}
void InvestorPositionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvestorPositionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvestorPositionMessage& InvestorPositionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvestorPositionMessage_proto_2finvestor_5fposition_2eproto.base);
  return *internal_default_instance();
}


void InvestorPositionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.InvestorPositionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posi_direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hedge_flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invest_unit_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&yd_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_cost_offset_) -
      reinterpret_cast<char*>(&yd_position_)) + sizeof(position_cost_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvestorPositionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string broker_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_broker_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.broker_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string investor_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_investor_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.investor_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string posi_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_posi_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.posi_direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hedge_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hedge_flag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.hedge_flag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string position_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_position_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.position_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yd_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          yd_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 long_frozen = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          long_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 short_frozen = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          short_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double long_frozen_amount = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          long_frozen_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double short_frozen_amount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          short_frozen_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 open_volume = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          open_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 close_volume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          close_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          open_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_amount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          close_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double position_cost = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          position_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_margin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          pre_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double use_margin = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          use_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_margin = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          frozen_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_cash = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          frozen_cash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double frozen_commission = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          frozen_commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cash_in = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          cash_in_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double commission = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          commission_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_profit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          close_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double position_profit = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          position_profit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pre_settlement_price = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          pre_settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double settlement_price = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          settlement_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string trading_day = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_trading_day();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.trading_day"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 settlement_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          settlement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double open_cost = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          open_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double exchange_margin = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          exchange_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 comb_position = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          comb_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 comb_long_frozen = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          comb_long_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 comb_short_frozen = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          comb_short_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double close_profit_by_date = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          close_profit_by_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double close_profit_by_trade = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          close_profit_by_trade_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 today_position = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          today_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double margin_rate_by_money = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          margin_rate_by_money_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double margin_rate_by_volume = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          margin_rate_by_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 strike_frozen = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          strike_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double strike_frozen_amount = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          strike_frozen_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 abandon_frozen = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          abandon_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yd_strike_frozen = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          yd_strike_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invest_unit_id = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_invest_unit_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionMessage.invest_unit_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double position_cost_offset = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          position_cost_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvestorPositionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctp.InvestorPositionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  // string broker_id = 2;
  if (this->broker_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_id().data(), static_cast<int>(this->_internal_broker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.broker_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_broker_id(), target);
  }

  // string investor_id = 3;
  if (this->investor_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_investor_id().data(), static_cast<int>(this->_internal_investor_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.investor_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_investor_id(), target);
  }

  // string posi_direction = 4;
  if (this->posi_direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_posi_direction().data(), static_cast<int>(this->_internal_posi_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.posi_direction");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_posi_direction(), target);
  }

  // string hedge_flag = 5;
  if (this->hedge_flag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hedge_flag().data(), static_cast<int>(this->_internal_hedge_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.hedge_flag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hedge_flag(), target);
  }

  // string position_date = 6;
  if (this->position_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_date().data(), static_cast<int>(this->_internal_position_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.position_date");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_position_date(), target);
  }

  // int32 yd_position = 7;
  if (this->yd_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_yd_position(), target);
  }

  // int32 position = 8;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_position(), target);
  }

  // int32 long_frozen = 9;
  if (this->long_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_long_frozen(), target);
  }

  // int32 short_frozen = 10;
  if (this->short_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_short_frozen(), target);
  }

  // double long_frozen_amount = 11;
  if (!(this->long_frozen_amount() <= 0 && this->long_frozen_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_long_frozen_amount(), target);
  }

  // double short_frozen_amount = 12;
  if (!(this->short_frozen_amount() <= 0 && this->short_frozen_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_short_frozen_amount(), target);
  }

  // int32 open_volume = 13;
  if (this->open_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_open_volume(), target);
  }

  // int32 close_volume = 14;
  if (this->close_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_close_volume(), target);
  }

  // double open_amount = 15;
  if (!(this->open_amount() <= 0 && this->open_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_open_amount(), target);
  }

  // double close_amount = 16;
  if (!(this->close_amount() <= 0 && this->close_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_close_amount(), target);
  }

  // double position_cost = 17;
  if (!(this->position_cost() <= 0 && this->position_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_position_cost(), target);
  }

  // double pre_margin = 18;
  if (!(this->pre_margin() <= 0 && this->pre_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_pre_margin(), target);
  }

  // double use_margin = 19;
  if (!(this->use_margin() <= 0 && this->use_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_use_margin(), target);
  }

  // double frozen_margin = 20;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_frozen_margin(), target);
  }

  // double frozen_cash = 21;
  if (!(this->frozen_cash() <= 0 && this->frozen_cash() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_frozen_cash(), target);
  }

  // double frozen_commission = 22;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_frozen_commission(), target);
  }

  // double cash_in = 23;
  if (!(this->cash_in() <= 0 && this->cash_in() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_cash_in(), target);
  }

  // double commission = 24;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_commission(), target);
  }

  // double close_profit = 25;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_close_profit(), target);
  }

  // double position_profit = 26;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_position_profit(), target);
  }

  // double pre_settlement_price = 27;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_pre_settlement_price(), target);
  }

  // double settlement_price = 28;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_settlement_price(), target);
  }

  // string trading_day = 29;
  if (this->trading_day().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trading_day().data(), static_cast<int>(this->_internal_trading_day().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.trading_day");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_trading_day(), target);
  }

  // int32 settlement_id = 30;
  if (this->settlement_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_settlement_id(), target);
  }

  // double open_cost = 31;
  if (!(this->open_cost() <= 0 && this->open_cost() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_open_cost(), target);
  }

  // double exchange_margin = 32;
  if (!(this->exchange_margin() <= 0 && this->exchange_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_exchange_margin(), target);
  }

  // int32 comb_position = 33;
  if (this->comb_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_comb_position(), target);
  }

  // int32 comb_long_frozen = 34;
  if (this->comb_long_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_comb_long_frozen(), target);
  }

  // int32 comb_short_frozen = 35;
  if (this->comb_short_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_comb_short_frozen(), target);
  }

  // double close_profit_by_date = 36;
  if (!(this->close_profit_by_date() <= 0 && this->close_profit_by_date() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_close_profit_by_date(), target);
  }

  // double close_profit_by_trade = 37;
  if (!(this->close_profit_by_trade() <= 0 && this->close_profit_by_trade() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_close_profit_by_trade(), target);
  }

  // int32 today_position = 38;
  if (this->today_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_today_position(), target);
  }

  // double margin_rate_by_money = 39;
  if (!(this->margin_rate_by_money() <= 0 && this->margin_rate_by_money() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_margin_rate_by_money(), target);
  }

  // double margin_rate_by_volume = 40;
  if (!(this->margin_rate_by_volume() <= 0 && this->margin_rate_by_volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_margin_rate_by_volume(), target);
  }

  // int32 strike_frozen = 41;
  if (this->strike_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_strike_frozen(), target);
  }

  // double strike_frozen_amount = 42;
  if (!(this->strike_frozen_amount() <= 0 && this->strike_frozen_amount() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_strike_frozen_amount(), target);
  }

  // int32 abandon_frozen = 43;
  if (this->abandon_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_abandon_frozen(), target);
  }

  // string exchange_id = 44;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.exchange_id");
    target = stream->WriteStringMaybeAliased(
        44, this->_internal_exchange_id(), target);
  }

  // int32 yd_strike_frozen = 45;
  if (this->yd_strike_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(45, this->_internal_yd_strike_frozen(), target);
  }

  // string invest_unit_id = 46;
  if (this->invest_unit_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invest_unit_id().data(), static_cast<int>(this->_internal_invest_unit_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionMessage.invest_unit_id");
    target = stream->WriteStringMaybeAliased(
        46, this->_internal_invest_unit_id(), target);
  }

  // double position_cost_offset = 47;
  if (!(this->position_cost_offset() <= 0 && this->position_cost_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_position_cost_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.InvestorPositionMessage)
  return target;
}

size_t InvestorPositionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.InvestorPositionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string broker_id = 2;
  if (this->broker_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_id());
  }

  // string investor_id = 3;
  if (this->investor_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_investor_id());
  }

  // string posi_direction = 4;
  if (this->posi_direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_posi_direction());
  }

  // string hedge_flag = 5;
  if (this->hedge_flag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hedge_flag());
  }

  // string position_date = 6;
  if (this->position_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_date());
  }

  // string trading_day = 29;
  if (this->trading_day().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trading_day());
  }

  // string exchange_id = 44;
  if (this->exchange_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string invest_unit_id = 46;
  if (this->invest_unit_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invest_unit_id());
  }

  // int32 yd_position = 7;
  if (this->yd_position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yd_position());
  }

  // int32 position = 8;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 long_frozen = 9;
  if (this->long_frozen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_long_frozen());
  }

  // int32 short_frozen = 10;
  if (this->short_frozen() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_short_frozen());
  }

  // double long_frozen_amount = 11;
  if (!(this->long_frozen_amount() <= 0 && this->long_frozen_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double short_frozen_amount = 12;
  if (!(this->short_frozen_amount() <= 0 && this->short_frozen_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 open_volume = 13;
  if (this->open_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_open_volume());
  }

  // int32 close_volume = 14;
  if (this->close_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_close_volume());
  }

  // double open_amount = 15;
  if (!(this->open_amount() <= 0 && this->open_amount() >= 0)) {
    total_size += 1 + 8;
  }

  // double close_amount = 16;
  if (!(this->close_amount() <= 0 && this->close_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // double position_cost = 17;
  if (!(this->position_cost() <= 0 && this->position_cost() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_margin = 18;
  if (!(this->pre_margin() <= 0 && this->pre_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // double use_margin = 19;
  if (!(this->use_margin() <= 0 && this->use_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_margin = 20;
  if (!(this->frozen_margin() <= 0 && this->frozen_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_cash = 21;
  if (!(this->frozen_cash() <= 0 && this->frozen_cash() >= 0)) {
    total_size += 2 + 8;
  }

  // double frozen_commission = 22;
  if (!(this->frozen_commission() <= 0 && this->frozen_commission() >= 0)) {
    total_size += 2 + 8;
  }

  // double cash_in = 23;
  if (!(this->cash_in() <= 0 && this->cash_in() >= 0)) {
    total_size += 2 + 8;
  }

  // double commission = 24;
  if (!(this->commission() <= 0 && this->commission() >= 0)) {
    total_size += 2 + 8;
  }

  // double close_profit = 25;
  if (!(this->close_profit() <= 0 && this->close_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double position_profit = 26;
  if (!(this->position_profit() <= 0 && this->position_profit() >= 0)) {
    total_size += 2 + 8;
  }

  // double pre_settlement_price = 27;
  if (!(this->pre_settlement_price() <= 0 && this->pre_settlement_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double settlement_price = 28;
  if (!(this->settlement_price() <= 0 && this->settlement_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double open_cost = 31;
  if (!(this->open_cost() <= 0 && this->open_cost() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 settlement_id = 30;
  if (this->settlement_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_settlement_id());
  }

  // int32 comb_position = 33;
  if (this->comb_position() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_comb_position());
  }

  // double exchange_margin = 32;
  if (!(this->exchange_margin() <= 0 && this->exchange_margin() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 comb_long_frozen = 34;
  if (this->comb_long_frozen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_comb_long_frozen());
  }

  // int32 comb_short_frozen = 35;
  if (this->comb_short_frozen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_comb_short_frozen());
  }

  // double close_profit_by_date = 36;
  if (!(this->close_profit_by_date() <= 0 && this->close_profit_by_date() >= 0)) {
    total_size += 2 + 8;
  }

  // double close_profit_by_trade = 37;
  if (!(this->close_profit_by_trade() <= 0 && this->close_profit_by_trade() >= 0)) {
    total_size += 2 + 8;
  }

  // double margin_rate_by_money = 39;
  if (!(this->margin_rate_by_money() <= 0 && this->margin_rate_by_money() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 today_position = 38;
  if (this->today_position() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_today_position());
  }

  // int32 strike_frozen = 41;
  if (this->strike_frozen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_strike_frozen());
  }

  // double margin_rate_by_volume = 40;
  if (!(this->margin_rate_by_volume() <= 0 && this->margin_rate_by_volume() >= 0)) {
    total_size += 2 + 8;
  }

  // double strike_frozen_amount = 42;
  if (!(this->strike_frozen_amount() <= 0 && this->strike_frozen_amount() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 abandon_frozen = 43;
  if (this->abandon_frozen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abandon_frozen());
  }

  // int32 yd_strike_frozen = 45;
  if (this->yd_strike_frozen() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yd_strike_frozen());
  }

  // double position_cost_offset = 47;
  if (!(this->position_cost_offset() <= 0 && this->position_cost_offset() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvestorPositionMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.InvestorPositionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InvestorPositionMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvestorPositionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.InvestorPositionMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.InvestorPositionMessage)
    MergeFrom(*source);
  }
}

void InvestorPositionMessage::MergeFrom(const InvestorPositionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.InvestorPositionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.broker_id().size() > 0) {
    _internal_set_broker_id(from._internal_broker_id());
  }
  if (from.investor_id().size() > 0) {
    _internal_set_investor_id(from._internal_investor_id());
  }
  if (from.posi_direction().size() > 0) {
    _internal_set_posi_direction(from._internal_posi_direction());
  }
  if (from.hedge_flag().size() > 0) {
    _internal_set_hedge_flag(from._internal_hedge_flag());
  }
  if (from.position_date().size() > 0) {
    _internal_set_position_date(from._internal_position_date());
  }
  if (from.trading_day().size() > 0) {
    _internal_set_trading_day(from._internal_trading_day());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.invest_unit_id().size() > 0) {
    _internal_set_invest_unit_id(from._internal_invest_unit_id());
  }
  if (from.yd_position() != 0) {
    _internal_set_yd_position(from._internal_yd_position());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.long_frozen() != 0) {
    _internal_set_long_frozen(from._internal_long_frozen());
  }
  if (from.short_frozen() != 0) {
    _internal_set_short_frozen(from._internal_short_frozen());
  }
  if (!(from.long_frozen_amount() <= 0 && from.long_frozen_amount() >= 0)) {
    _internal_set_long_frozen_amount(from._internal_long_frozen_amount());
  }
  if (!(from.short_frozen_amount() <= 0 && from.short_frozen_amount() >= 0)) {
    _internal_set_short_frozen_amount(from._internal_short_frozen_amount());
  }
  if (from.open_volume() != 0) {
    _internal_set_open_volume(from._internal_open_volume());
  }
  if (from.close_volume() != 0) {
    _internal_set_close_volume(from._internal_close_volume());
  }
  if (!(from.open_amount() <= 0 && from.open_amount() >= 0)) {
    _internal_set_open_amount(from._internal_open_amount());
  }
  if (!(from.close_amount() <= 0 && from.close_amount() >= 0)) {
    _internal_set_close_amount(from._internal_close_amount());
  }
  if (!(from.position_cost() <= 0 && from.position_cost() >= 0)) {
    _internal_set_position_cost(from._internal_position_cost());
  }
  if (!(from.pre_margin() <= 0 && from.pre_margin() >= 0)) {
    _internal_set_pre_margin(from._internal_pre_margin());
  }
  if (!(from.use_margin() <= 0 && from.use_margin() >= 0)) {
    _internal_set_use_margin(from._internal_use_margin());
  }
  if (!(from.frozen_margin() <= 0 && from.frozen_margin() >= 0)) {
    _internal_set_frozen_margin(from._internal_frozen_margin());
  }
  if (!(from.frozen_cash() <= 0 && from.frozen_cash() >= 0)) {
    _internal_set_frozen_cash(from._internal_frozen_cash());
  }
  if (!(from.frozen_commission() <= 0 && from.frozen_commission() >= 0)) {
    _internal_set_frozen_commission(from._internal_frozen_commission());
  }
  if (!(from.cash_in() <= 0 && from.cash_in() >= 0)) {
    _internal_set_cash_in(from._internal_cash_in());
  }
  if (!(from.commission() <= 0 && from.commission() >= 0)) {
    _internal_set_commission(from._internal_commission());
  }
  if (!(from.close_profit() <= 0 && from.close_profit() >= 0)) {
    _internal_set_close_profit(from._internal_close_profit());
  }
  if (!(from.position_profit() <= 0 && from.position_profit() >= 0)) {
    _internal_set_position_profit(from._internal_position_profit());
  }
  if (!(from.pre_settlement_price() <= 0 && from.pre_settlement_price() >= 0)) {
    _internal_set_pre_settlement_price(from._internal_pre_settlement_price());
  }
  if (!(from.settlement_price() <= 0 && from.settlement_price() >= 0)) {
    _internal_set_settlement_price(from._internal_settlement_price());
  }
  if (!(from.open_cost() <= 0 && from.open_cost() >= 0)) {
    _internal_set_open_cost(from._internal_open_cost());
  }
  if (from.settlement_id() != 0) {
    _internal_set_settlement_id(from._internal_settlement_id());
  }
  if (from.comb_position() != 0) {
    _internal_set_comb_position(from._internal_comb_position());
  }
  if (!(from.exchange_margin() <= 0 && from.exchange_margin() >= 0)) {
    _internal_set_exchange_margin(from._internal_exchange_margin());
  }
  if (from.comb_long_frozen() != 0) {
    _internal_set_comb_long_frozen(from._internal_comb_long_frozen());
  }
  if (from.comb_short_frozen() != 0) {
    _internal_set_comb_short_frozen(from._internal_comb_short_frozen());
  }
  if (!(from.close_profit_by_date() <= 0 && from.close_profit_by_date() >= 0)) {
    _internal_set_close_profit_by_date(from._internal_close_profit_by_date());
  }
  if (!(from.close_profit_by_trade() <= 0 && from.close_profit_by_trade() >= 0)) {
    _internal_set_close_profit_by_trade(from._internal_close_profit_by_trade());
  }
  if (!(from.margin_rate_by_money() <= 0 && from.margin_rate_by_money() >= 0)) {
    _internal_set_margin_rate_by_money(from._internal_margin_rate_by_money());
  }
  if (from.today_position() != 0) {
    _internal_set_today_position(from._internal_today_position());
  }
  if (from.strike_frozen() != 0) {
    _internal_set_strike_frozen(from._internal_strike_frozen());
  }
  if (!(from.margin_rate_by_volume() <= 0 && from.margin_rate_by_volume() >= 0)) {
    _internal_set_margin_rate_by_volume(from._internal_margin_rate_by_volume());
  }
  if (!(from.strike_frozen_amount() <= 0 && from.strike_frozen_amount() >= 0)) {
    _internal_set_strike_frozen_amount(from._internal_strike_frozen_amount());
  }
  if (from.abandon_frozen() != 0) {
    _internal_set_abandon_frozen(from._internal_abandon_frozen());
  }
  if (from.yd_strike_frozen() != 0) {
    _internal_set_yd_strike_frozen(from._internal_yd_strike_frozen());
  }
  if (!(from.position_cost_offset() <= 0 && from.position_cost_offset() >= 0)) {
    _internal_set_position_cost_offset(from._internal_position_cost_offset());
  }
}

void InvestorPositionMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.InvestorPositionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestorPositionMessage::CopyFrom(const InvestorPositionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.InvestorPositionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestorPositionMessage::IsInitialized() const {
  return true;
}

void InvestorPositionMessage::InternalSwap(InvestorPositionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  broker_id_.Swap(&other->broker_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  investor_id_.Swap(&other->investor_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  posi_direction_.Swap(&other->posi_direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hedge_flag_.Swap(&other->hedge_flag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_date_.Swap(&other->position_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trading_day_.Swap(&other->trading_day_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invest_unit_id_.Swap(&other->invest_unit_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvestorPositionMessage, position_cost_offset_)
      + sizeof(InvestorPositionMessage::position_cost_offset_)
      - PROTOBUF_FIELD_OFFSET(InvestorPositionMessage, yd_position_)>(
          reinterpret_cast<char*>(&yd_position_),
          reinterpret_cast<char*>(&other->yd_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvestorPositionMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvestorPositionBatchMessage::InitAsDefaultInstance() {
}
class InvestorPositionBatchMessage::_Internal {
 public:
};

InvestorPositionBatchMessage::InvestorPositionBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctp.InvestorPositionBatchMessage)
}
InvestorPositionBatchMessage::InvestorPositionBatchMessage(const InvestorPositionBatchMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_type(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ctp.InvestorPositionBatchMessage)
}

void InvestorPositionBatchMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvestorPositionBatchMessage_proto_2finvestor_5fposition_2eproto.base);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

InvestorPositionBatchMessage::~InvestorPositionBatchMessage() {
  // @@protoc_insertion_point(destructor:ctp.InvestorPositionBatchMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InvestorPositionBatchMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvestorPositionBatchMessage::ArenaDtor(void* object) {
  InvestorPositionBatchMessage* _this = reinterpret_cast< InvestorPositionBatchMessage* >(object);
  (void)_this;
}
void InvestorPositionBatchMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InvestorPositionBatchMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvestorPositionBatchMessage& InvestorPositionBatchMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvestorPositionBatchMessage_proto_2finvestor_5fposition_2eproto.base);
  return *internal_default_instance();
}


void InvestorPositionBatchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.InvestorPositionBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvestorPositionBatchMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InvestorPositionBatchMessage.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ctp.InvestorPositionMessage positions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvestorPositionBatchMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctp.InvestorPositionBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InvestorPositionBatchMessage.message_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_type(), target);
  }

  // repeated .ctp.InvestorPositionMessage positions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.InvestorPositionBatchMessage)
  return target;
}

size_t InvestorPositionBatchMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.InvestorPositionBatchMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ctp.InvestorPositionMessage positions = 3;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_type = 2;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvestorPositionBatchMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.InvestorPositionBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InvestorPositionBatchMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvestorPositionBatchMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.InvestorPositionBatchMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.InvestorPositionBatchMessage)
    MergeFrom(*source);
  }
}

void InvestorPositionBatchMessage::MergeFrom(const InvestorPositionBatchMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.InvestorPositionBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void InvestorPositionBatchMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.InvestorPositionBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvestorPositionBatchMessage::CopyFrom(const InvestorPositionBatchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.InvestorPositionBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvestorPositionBatchMessage::IsInitialized() const {
  return true;
}

void InvestorPositionBatchMessage::InternalSwap(InvestorPositionBatchMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvestorPositionBatchMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ctp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ctp::InvestorPositionMessage* Arena::CreateMaybeMessage< ::ctp::InvestorPositionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctp::InvestorPositionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ctp::InvestorPositionBatchMessage* Arena::CreateMaybeMessage< ::ctp::InvestorPositionBatchMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctp::InvestorPositionBatchMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
