// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/investor_position.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2finvestor_5fposition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2finvestor_5fposition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2finvestor_5fposition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2finvestor_5fposition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finvestor_5fposition_2eproto;
namespace ctp {
class InvestorPositionBatchMessage;
class InvestorPositionBatchMessageDefaultTypeInternal;
extern InvestorPositionBatchMessageDefaultTypeInternal _InvestorPositionBatchMessage_default_instance_;
class InvestorPositionMessage;
class InvestorPositionMessageDefaultTypeInternal;
extern InvestorPositionMessageDefaultTypeInternal _InvestorPositionMessage_default_instance_;
}  // namespace ctp
PROTOBUF_NAMESPACE_OPEN
template<> ::ctp::InvestorPositionBatchMessage* Arena::CreateMaybeMessage<::ctp::InvestorPositionBatchMessage>(Arena*);
template<> ::ctp::InvestorPositionMessage* Arena::CreateMaybeMessage<::ctp::InvestorPositionMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ctp {

// ===================================================================

class InvestorPositionMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ctp.InvestorPositionMessage) */ {
 public:
  inline InvestorPositionMessage() : InvestorPositionMessage(nullptr) {};
  virtual ~InvestorPositionMessage();

  InvestorPositionMessage(const InvestorPositionMessage& from);
  InvestorPositionMessage(InvestorPositionMessage&& from) noexcept
    : InvestorPositionMessage() {
    *this = ::std::move(from);
  }

  inline InvestorPositionMessage& operator=(const InvestorPositionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvestorPositionMessage& operator=(InvestorPositionMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvestorPositionMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvestorPositionMessage* internal_default_instance() {
    return reinterpret_cast<const InvestorPositionMessage*>(
               &_InvestorPositionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InvestorPositionMessage& a, InvestorPositionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InvestorPositionMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvestorPositionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvestorPositionMessage* New() const final {
    return CreateMaybeMessage<InvestorPositionMessage>(nullptr);
  }

  InvestorPositionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvestorPositionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvestorPositionMessage& from);
  void MergeFrom(const InvestorPositionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvestorPositionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ctp.InvestorPositionMessage";
  }
  protected:
  explicit InvestorPositionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finvestor_5fposition_2eproto);
    return ::descriptor_table_proto_2finvestor_5fposition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 1,
    kBrokerIdFieldNumber = 2,
    kInvestorIdFieldNumber = 3,
    kPosiDirectionFieldNumber = 4,
    kHedgeFlagFieldNumber = 5,
    kPositionDateFieldNumber = 6,
    kTradingDayFieldNumber = 29,
    kExchangeIdFieldNumber = 44,
    kInvestUnitIdFieldNumber = 46,
    kYdPositionFieldNumber = 7,
    kPositionFieldNumber = 8,
    kLongFrozenFieldNumber = 9,
    kShortFrozenFieldNumber = 10,
    kLongFrozenAmountFieldNumber = 11,
    kShortFrozenAmountFieldNumber = 12,
    kOpenVolumeFieldNumber = 13,
    kCloseVolumeFieldNumber = 14,
    kOpenAmountFieldNumber = 15,
    kCloseAmountFieldNumber = 16,
    kPositionCostFieldNumber = 17,
    kPreMarginFieldNumber = 18,
    kUseMarginFieldNumber = 19,
    kFrozenMarginFieldNumber = 20,
    kFrozenCashFieldNumber = 21,
    kFrozenCommissionFieldNumber = 22,
    kCashInFieldNumber = 23,
    kCommissionFieldNumber = 24,
    kCloseProfitFieldNumber = 25,
    kPositionProfitFieldNumber = 26,
    kPreSettlementPriceFieldNumber = 27,
    kSettlementPriceFieldNumber = 28,
    kOpenCostFieldNumber = 31,
    kSettlementIdFieldNumber = 30,
    kCombPositionFieldNumber = 33,
    kExchangeMarginFieldNumber = 32,
    kCombLongFrozenFieldNumber = 34,
    kCombShortFrozenFieldNumber = 35,
    kCloseProfitByDateFieldNumber = 36,
    kCloseProfitByTradeFieldNumber = 37,
    kMarginRateByMoneyFieldNumber = 39,
    kTodayPositionFieldNumber = 38,
    kStrikeFrozenFieldNumber = 41,
    kMarginRateByVolumeFieldNumber = 40,
    kStrikeFrozenAmountFieldNumber = 42,
    kAbandonFrozenFieldNumber = 43,
    kYdStrikeFrozenFieldNumber = 45,
    kPositionCostOffsetFieldNumber = 47,
  };
  // string instrument_id = 1;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_id(
      std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string broker_id = 2;
  void clear_broker_id();
  const std::string& broker_id() const;
  void set_broker_id(const std::string& value);
  void set_broker_id(std::string&& value);
  void set_broker_id(const char* value);
  void set_broker_id(const char* value, size_t size);
  std::string* mutable_broker_id();
  std::string* release_broker_id();
  void set_allocated_broker_id(std::string* broker_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_broker_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_broker_id(
      std::string* broker_id);
  private:
  const std::string& _internal_broker_id() const;
  void _internal_set_broker_id(const std::string& value);
  std::string* _internal_mutable_broker_id();
  public:

  // string investor_id = 3;
  void clear_investor_id();
  const std::string& investor_id() const;
  void set_investor_id(const std::string& value);
  void set_investor_id(std::string&& value);
  void set_investor_id(const char* value);
  void set_investor_id(const char* value, size_t size);
  std::string* mutable_investor_id();
  std::string* release_investor_id();
  void set_allocated_investor_id(std::string* investor_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_investor_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_investor_id(
      std::string* investor_id);
  private:
  const std::string& _internal_investor_id() const;
  void _internal_set_investor_id(const std::string& value);
  std::string* _internal_mutable_investor_id();
  public:

  // string posi_direction = 4;
  void clear_posi_direction();
  const std::string& posi_direction() const;
  void set_posi_direction(const std::string& value);
  void set_posi_direction(std::string&& value);
  void set_posi_direction(const char* value);
  void set_posi_direction(const char* value, size_t size);
  std::string* mutable_posi_direction();
  std::string* release_posi_direction();
  void set_allocated_posi_direction(std::string* posi_direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_posi_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_posi_direction(
      std::string* posi_direction);
  private:
  const std::string& _internal_posi_direction() const;
  void _internal_set_posi_direction(const std::string& value);
  std::string* _internal_mutable_posi_direction();
  public:

  // string hedge_flag = 5;
  void clear_hedge_flag();
  const std::string& hedge_flag() const;
  void set_hedge_flag(const std::string& value);
  void set_hedge_flag(std::string&& value);
  void set_hedge_flag(const char* value);
  void set_hedge_flag(const char* value, size_t size);
  std::string* mutable_hedge_flag();
  std::string* release_hedge_flag();
  void set_allocated_hedge_flag(std::string* hedge_flag);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hedge_flag();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hedge_flag(
      std::string* hedge_flag);
  private:
  const std::string& _internal_hedge_flag() const;
  void _internal_set_hedge_flag(const std::string& value);
  std::string* _internal_mutable_hedge_flag();
  public:

  // string position_date = 6;
  void clear_position_date();
  const std::string& position_date() const;
  void set_position_date(const std::string& value);
  void set_position_date(std::string&& value);
  void set_position_date(const char* value);
  void set_position_date(const char* value, size_t size);
  std::string* mutable_position_date();
  std::string* release_position_date();
  void set_allocated_position_date(std::string* position_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_position_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_position_date(
      std::string* position_date);
  private:
  const std::string& _internal_position_date() const;
  void _internal_set_position_date(const std::string& value);
  std::string* _internal_mutable_position_date();
  public:

  // string trading_day = 29;
  void clear_trading_day();
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trading_day();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trading_day(
      std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string exchange_id = 44;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_id(
      std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string invest_unit_id = 46;
  void clear_invest_unit_id();
  const std::string& invest_unit_id() const;
  void set_invest_unit_id(const std::string& value);
  void set_invest_unit_id(std::string&& value);
  void set_invest_unit_id(const char* value);
  void set_invest_unit_id(const char* value, size_t size);
  std::string* mutable_invest_unit_id();
  std::string* release_invest_unit_id();
  void set_allocated_invest_unit_id(std::string* invest_unit_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invest_unit_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invest_unit_id(
      std::string* invest_unit_id);
  private:
  const std::string& _internal_invest_unit_id() const;
  void _internal_set_invest_unit_id(const std::string& value);
  std::string* _internal_mutable_invest_unit_id();
  public:

  // int32 yd_position = 7;
  void clear_yd_position();
  ::PROTOBUF_NAMESPACE_ID::int32 yd_position() const;
  void set_yd_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yd_position() const;
  void _internal_set_yd_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 position = 8;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int32 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_position() const;
  void _internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 long_frozen = 9;
  void clear_long_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 long_frozen() const;
  void set_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_long_frozen() const;
  void _internal_set_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 short_frozen = 10;
  void clear_short_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 short_frozen() const;
  void set_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_short_frozen() const;
  void _internal_set_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double long_frozen_amount = 11;
  void clear_long_frozen_amount();
  double long_frozen_amount() const;
  void set_long_frozen_amount(double value);
  private:
  double _internal_long_frozen_amount() const;
  void _internal_set_long_frozen_amount(double value);
  public:

  // double short_frozen_amount = 12;
  void clear_short_frozen_amount();
  double short_frozen_amount() const;
  void set_short_frozen_amount(double value);
  private:
  double _internal_short_frozen_amount() const;
  void _internal_set_short_frozen_amount(double value);
  public:

  // int32 open_volume = 13;
  void clear_open_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 open_volume() const;
  void set_open_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open_volume() const;
  void _internal_set_open_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 close_volume = 14;
  void clear_close_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 close_volume() const;
  void set_close_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_close_volume() const;
  void _internal_set_close_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double open_amount = 15;
  void clear_open_amount();
  double open_amount() const;
  void set_open_amount(double value);
  private:
  double _internal_open_amount() const;
  void _internal_set_open_amount(double value);
  public:

  // double close_amount = 16;
  void clear_close_amount();
  double close_amount() const;
  void set_close_amount(double value);
  private:
  double _internal_close_amount() const;
  void _internal_set_close_amount(double value);
  public:

  // double position_cost = 17;
  void clear_position_cost();
  double position_cost() const;
  void set_position_cost(double value);
  private:
  double _internal_position_cost() const;
  void _internal_set_position_cost(double value);
  public:

  // double pre_margin = 18;
  void clear_pre_margin();
  double pre_margin() const;
  void set_pre_margin(double value);
  private:
  double _internal_pre_margin() const;
  void _internal_set_pre_margin(double value);
  public:

  // double use_margin = 19;
  void clear_use_margin();
  double use_margin() const;
  void set_use_margin(double value);
  private:
  double _internal_use_margin() const;
  void _internal_set_use_margin(double value);
  public:

  // double frozen_margin = 20;
  void clear_frozen_margin();
  double frozen_margin() const;
  void set_frozen_margin(double value);
  private:
  double _internal_frozen_margin() const;
  void _internal_set_frozen_margin(double value);
  public:

  // double frozen_cash = 21;
  void clear_frozen_cash();
  double frozen_cash() const;
  void set_frozen_cash(double value);
  private:
  double _internal_frozen_cash() const;
  void _internal_set_frozen_cash(double value);
  public:

  // double frozen_commission = 22;
  void clear_frozen_commission();
  double frozen_commission() const;
  void set_frozen_commission(double value);
  private:
  double _internal_frozen_commission() const;
  void _internal_set_frozen_commission(double value);
  public:

  // double cash_in = 23;
  void clear_cash_in();
  double cash_in() const;
  void set_cash_in(double value);
  private:
  double _internal_cash_in() const;
  void _internal_set_cash_in(double value);
  public:

  // double commission = 24;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // double close_profit = 25;
  void clear_close_profit();
  double close_profit() const;
  void set_close_profit(double value);
  private:
  double _internal_close_profit() const;
  void _internal_set_close_profit(double value);
  public:

  // double position_profit = 26;
  void clear_position_profit();
  double position_profit() const;
  void set_position_profit(double value);
  private:
  double _internal_position_profit() const;
  void _internal_set_position_profit(double value);
  public:

  // double pre_settlement_price = 27;
  void clear_pre_settlement_price();
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);
  private:
  double _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(double value);
  public:

  // double settlement_price = 28;
  void clear_settlement_price();
  double settlement_price() const;
  void set_settlement_price(double value);
  private:
  double _internal_settlement_price() const;
  void _internal_set_settlement_price(double value);
  public:

  // double open_cost = 31;
  void clear_open_cost();
  double open_cost() const;
  void set_open_cost(double value);
  private:
  double _internal_open_cost() const;
  void _internal_set_open_cost(double value);
  public:

  // int32 settlement_id = 30;
  void clear_settlement_id();
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id() const;
  void set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_settlement_id() const;
  void _internal_set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 comb_position = 33;
  void clear_comb_position();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_position() const;
  void set_comb_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_position() const;
  void _internal_set_comb_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double exchange_margin = 32;
  void clear_exchange_margin();
  double exchange_margin() const;
  void set_exchange_margin(double value);
  private:
  double _internal_exchange_margin() const;
  void _internal_set_exchange_margin(double value);
  public:

  // int32 comb_long_frozen = 34;
  void clear_comb_long_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_long_frozen() const;
  void set_comb_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_long_frozen() const;
  void _internal_set_comb_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 comb_short_frozen = 35;
  void clear_comb_short_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 comb_short_frozen() const;
  void set_comb_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_comb_short_frozen() const;
  void _internal_set_comb_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double close_profit_by_date = 36;
  void clear_close_profit_by_date();
  double close_profit_by_date() const;
  void set_close_profit_by_date(double value);
  private:
  double _internal_close_profit_by_date() const;
  void _internal_set_close_profit_by_date(double value);
  public:

  // double close_profit_by_trade = 37;
  void clear_close_profit_by_trade();
  double close_profit_by_trade() const;
  void set_close_profit_by_trade(double value);
  private:
  double _internal_close_profit_by_trade() const;
  void _internal_set_close_profit_by_trade(double value);
  public:

  // double margin_rate_by_money = 39;
  void clear_margin_rate_by_money();
  double margin_rate_by_money() const;
  void set_margin_rate_by_money(double value);
  private:
  double _internal_margin_rate_by_money() const;
  void _internal_set_margin_rate_by_money(double value);
  public:

  // int32 today_position = 38;
  void clear_today_position();
  ::PROTOBUF_NAMESPACE_ID::int32 today_position() const;
  void set_today_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_today_position() const;
  void _internal_set_today_position(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 strike_frozen = 41;
  void clear_strike_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 strike_frozen() const;
  void set_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strike_frozen() const;
  void _internal_set_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double margin_rate_by_volume = 40;
  void clear_margin_rate_by_volume();
  double margin_rate_by_volume() const;
  void set_margin_rate_by_volume(double value);
  private:
  double _internal_margin_rate_by_volume() const;
  void _internal_set_margin_rate_by_volume(double value);
  public:

  // double strike_frozen_amount = 42;
  void clear_strike_frozen_amount();
  double strike_frozen_amount() const;
  void set_strike_frozen_amount(double value);
  private:
  double _internal_strike_frozen_amount() const;
  void _internal_set_strike_frozen_amount(double value);
  public:

  // int32 abandon_frozen = 43;
  void clear_abandon_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 abandon_frozen() const;
  void set_abandon_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_abandon_frozen() const;
  void _internal_set_abandon_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 yd_strike_frozen = 45;
  void clear_yd_strike_frozen();
  ::PROTOBUF_NAMESPACE_ID::int32 yd_strike_frozen() const;
  void set_yd_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yd_strike_frozen() const;
  void _internal_set_yd_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double position_cost_offset = 47;
  void clear_position_cost_offset();
  double position_cost_offset() const;
  void set_position_cost_offset(double value);
  private:
  double _internal_position_cost_offset() const;
  void _internal_set_position_cost_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:ctp.InvestorPositionMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr investor_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr posi_direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hedge_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invest_unit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 yd_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 long_frozen_;
  ::PROTOBUF_NAMESPACE_ID::int32 short_frozen_;
  double long_frozen_amount_;
  double short_frozen_amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 close_volume_;
  double open_amount_;
  double close_amount_;
  double position_cost_;
  double pre_margin_;
  double use_margin_;
  double frozen_margin_;
  double frozen_cash_;
  double frozen_commission_;
  double cash_in_;
  double commission_;
  double close_profit_;
  double position_profit_;
  double pre_settlement_price_;
  double settlement_price_;
  double open_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 settlement_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_position_;
  double exchange_margin_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_long_frozen_;
  ::PROTOBUF_NAMESPACE_ID::int32 comb_short_frozen_;
  double close_profit_by_date_;
  double close_profit_by_trade_;
  double margin_rate_by_money_;
  ::PROTOBUF_NAMESPACE_ID::int32 today_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 strike_frozen_;
  double margin_rate_by_volume_;
  double strike_frozen_amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 abandon_frozen_;
  ::PROTOBUF_NAMESPACE_ID::int32 yd_strike_frozen_;
  double position_cost_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finvestor_5fposition_2eproto;
};
// -------------------------------------------------------------------

class InvestorPositionBatchMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ctp.InvestorPositionBatchMessage) */ {
 public:
  inline InvestorPositionBatchMessage() : InvestorPositionBatchMessage(nullptr) {};
  virtual ~InvestorPositionBatchMessage();

  InvestorPositionBatchMessage(const InvestorPositionBatchMessage& from);
  InvestorPositionBatchMessage(InvestorPositionBatchMessage&& from) noexcept
    : InvestorPositionBatchMessage() {
    *this = ::std::move(from);
  }

  inline InvestorPositionBatchMessage& operator=(const InvestorPositionBatchMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvestorPositionBatchMessage& operator=(InvestorPositionBatchMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvestorPositionBatchMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvestorPositionBatchMessage* internal_default_instance() {
    return reinterpret_cast<const InvestorPositionBatchMessage*>(
               &_InvestorPositionBatchMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InvestorPositionBatchMessage& a, InvestorPositionBatchMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InvestorPositionBatchMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvestorPositionBatchMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvestorPositionBatchMessage* New() const final {
    return CreateMaybeMessage<InvestorPositionBatchMessage>(nullptr);
  }

  InvestorPositionBatchMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvestorPositionBatchMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvestorPositionBatchMessage& from);
  void MergeFrom(const InvestorPositionBatchMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvestorPositionBatchMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ctp.InvestorPositionBatchMessage";
  }
  protected:
  explicit InvestorPositionBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finvestor_5fposition_2eproto);
    return ::descriptor_table_proto_2finvestor_5fposition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 3,
    kMessageTypeFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // repeated .ctp.InvestorPositionMessage positions = 3;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::ctp::InvestorPositionMessage* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InvestorPositionMessage >*
      mutable_positions();
  private:
  const ::ctp::InvestorPositionMessage& _internal_positions(int index) const;
  ::ctp::InvestorPositionMessage* _internal_add_positions();
  public:
  const ::ctp::InvestorPositionMessage& positions(int index) const;
  ::ctp::InvestorPositionMessage* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InvestorPositionMessage >&
      positions() const;

  // string message_type = 2;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_type(
      std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ctp.InvestorPositionBatchMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InvestorPositionMessage > positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finvestor_5fposition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InvestorPositionMessage

// string instrument_id = 1;
inline void InvestorPositionMessage::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::instrument_id() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.instrument_id)
  return _internal_instrument_id();
}
inline void InvestorPositionMessage::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.instrument_id)
}
inline std::string* InvestorPositionMessage::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& InvestorPositionMessage::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void InvestorPositionMessage::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.instrument_id)
}
inline void InvestorPositionMessage::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.instrument_id)
}
inline void InvestorPositionMessage::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.instrument_id)
}
inline std::string* InvestorPositionMessage::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_instrument_id() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.instrument_id)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_instrument_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.instrument_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_instrument_id(
    std::string* instrument_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.instrument_id)
}

// string broker_id = 2;
inline void InvestorPositionMessage::clear_broker_id() {
  broker_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::broker_id() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.broker_id)
  return _internal_broker_id();
}
inline void InvestorPositionMessage::set_broker_id(const std::string& value) {
  _internal_set_broker_id(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.broker_id)
}
inline std::string* InvestorPositionMessage::mutable_broker_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.broker_id)
  return _internal_mutable_broker_id();
}
inline const std::string& InvestorPositionMessage::_internal_broker_id() const {
  return broker_id_.Get();
}
inline void InvestorPositionMessage::_internal_set_broker_id(const std::string& value) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_broker_id(std::string&& value) {
  
  broker_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.broker_id)
}
inline void InvestorPositionMessage::set_broker_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.broker_id)
}
inline void InvestorPositionMessage::set_broker_id(const char* value,
    size_t size) {
  
  broker_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.broker_id)
}
inline std::string* InvestorPositionMessage::_internal_mutable_broker_id() {
  
  return broker_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_broker_id() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.broker_id)
  return broker_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_broker_id(std::string* broker_id) {
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.broker_id)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_broker_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.broker_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return broker_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_broker_id(
    std::string* broker_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (broker_id != nullptr) {
    
  } else {
    
  }
  broker_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      broker_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.broker_id)
}

// string investor_id = 3;
inline void InvestorPositionMessage::clear_investor_id() {
  investor_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::investor_id() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.investor_id)
  return _internal_investor_id();
}
inline void InvestorPositionMessage::set_investor_id(const std::string& value) {
  _internal_set_investor_id(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.investor_id)
}
inline std::string* InvestorPositionMessage::mutable_investor_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.investor_id)
  return _internal_mutable_investor_id();
}
inline const std::string& InvestorPositionMessage::_internal_investor_id() const {
  return investor_id_.Get();
}
inline void InvestorPositionMessage::_internal_set_investor_id(const std::string& value) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_investor_id(std::string&& value) {
  
  investor_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.investor_id)
}
inline void InvestorPositionMessage::set_investor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.investor_id)
}
inline void InvestorPositionMessage::set_investor_id(const char* value,
    size_t size) {
  
  investor_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.investor_id)
}
inline std::string* InvestorPositionMessage::_internal_mutable_investor_id() {
  
  return investor_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_investor_id() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.investor_id)
  return investor_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_investor_id(std::string* investor_id) {
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), investor_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.investor_id)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_investor_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.investor_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return investor_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_investor_id(
    std::string* investor_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (investor_id != nullptr) {
    
  } else {
    
  }
  investor_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      investor_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.investor_id)
}

// string posi_direction = 4;
inline void InvestorPositionMessage::clear_posi_direction() {
  posi_direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::posi_direction() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.posi_direction)
  return _internal_posi_direction();
}
inline void InvestorPositionMessage::set_posi_direction(const std::string& value) {
  _internal_set_posi_direction(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.posi_direction)
}
inline std::string* InvestorPositionMessage::mutable_posi_direction() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.posi_direction)
  return _internal_mutable_posi_direction();
}
inline const std::string& InvestorPositionMessage::_internal_posi_direction() const {
  return posi_direction_.Get();
}
inline void InvestorPositionMessage::_internal_set_posi_direction(const std::string& value) {
  
  posi_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_posi_direction(std::string&& value) {
  
  posi_direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.posi_direction)
}
inline void InvestorPositionMessage::set_posi_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  posi_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.posi_direction)
}
inline void InvestorPositionMessage::set_posi_direction(const char* value,
    size_t size) {
  
  posi_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.posi_direction)
}
inline std::string* InvestorPositionMessage::_internal_mutable_posi_direction() {
  
  return posi_direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_posi_direction() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.posi_direction)
  return posi_direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_posi_direction(std::string* posi_direction) {
  if (posi_direction != nullptr) {
    
  } else {
    
  }
  posi_direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), posi_direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.posi_direction)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_posi_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.posi_direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return posi_direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_posi_direction(
    std::string* posi_direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (posi_direction != nullptr) {
    
  } else {
    
  }
  posi_direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      posi_direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.posi_direction)
}

// string hedge_flag = 5;
inline void InvestorPositionMessage::clear_hedge_flag() {
  hedge_flag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::hedge_flag() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.hedge_flag)
  return _internal_hedge_flag();
}
inline void InvestorPositionMessage::set_hedge_flag(const std::string& value) {
  _internal_set_hedge_flag(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.hedge_flag)
}
inline std::string* InvestorPositionMessage::mutable_hedge_flag() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.hedge_flag)
  return _internal_mutable_hedge_flag();
}
inline const std::string& InvestorPositionMessage::_internal_hedge_flag() const {
  return hedge_flag_.Get();
}
inline void InvestorPositionMessage::_internal_set_hedge_flag(const std::string& value) {
  
  hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_hedge_flag(std::string&& value) {
  
  hedge_flag_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.hedge_flag)
}
inline void InvestorPositionMessage::set_hedge_flag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.hedge_flag)
}
inline void InvestorPositionMessage::set_hedge_flag(const char* value,
    size_t size) {
  
  hedge_flag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.hedge_flag)
}
inline std::string* InvestorPositionMessage::_internal_mutable_hedge_flag() {
  
  return hedge_flag_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_hedge_flag() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.hedge_flag)
  return hedge_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_hedge_flag(std::string* hedge_flag) {
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hedge_flag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.hedge_flag)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_hedge_flag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.hedge_flag)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hedge_flag_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_hedge_flag(
    std::string* hedge_flag) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hedge_flag != nullptr) {
    
  } else {
    
  }
  hedge_flag_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hedge_flag, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.hedge_flag)
}

// string position_date = 6;
inline void InvestorPositionMessage::clear_position_date() {
  position_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::position_date() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.position_date)
  return _internal_position_date();
}
inline void InvestorPositionMessage::set_position_date(const std::string& value) {
  _internal_set_position_date(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.position_date)
}
inline std::string* InvestorPositionMessage::mutable_position_date() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.position_date)
  return _internal_mutable_position_date();
}
inline const std::string& InvestorPositionMessage::_internal_position_date() const {
  return position_date_.Get();
}
inline void InvestorPositionMessage::_internal_set_position_date(const std::string& value) {
  
  position_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_position_date(std::string&& value) {
  
  position_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.position_date)
}
inline void InvestorPositionMessage::set_position_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  position_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.position_date)
}
inline void InvestorPositionMessage::set_position_date(const char* value,
    size_t size) {
  
  position_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.position_date)
}
inline std::string* InvestorPositionMessage::_internal_mutable_position_date() {
  
  return position_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_position_date() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.position_date)
  return position_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_position_date(std::string* position_date) {
  if (position_date != nullptr) {
    
  } else {
    
  }
  position_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.position_date)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_position_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.position_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return position_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_position_date(
    std::string* position_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (position_date != nullptr) {
    
  } else {
    
  }
  position_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      position_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.position_date)
}

// int32 yd_position = 7;
inline void InvestorPositionMessage::clear_yd_position() {
  yd_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_yd_position() const {
  return yd_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::yd_position() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.yd_position)
  return _internal_yd_position();
}
inline void InvestorPositionMessage::_internal_set_yd_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yd_position_ = value;
}
inline void InvestorPositionMessage::set_yd_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yd_position(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.yd_position)
}

// int32 position = 8;
inline void InvestorPositionMessage::clear_position() {
  position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_position() const {
  return position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::position() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.position)
  return _internal_position();
}
inline void InvestorPositionMessage::_internal_set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  position_ = value;
}
inline void InvestorPositionMessage::set_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.position)
}

// int32 long_frozen = 9;
inline void InvestorPositionMessage::clear_long_frozen() {
  long_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_long_frozen() const {
  return long_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::long_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.long_frozen)
  return _internal_long_frozen();
}
inline void InvestorPositionMessage::_internal_set_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  long_frozen_ = value;
}
inline void InvestorPositionMessage::set_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_long_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.long_frozen)
}

// int32 short_frozen = 10;
inline void InvestorPositionMessage::clear_short_frozen() {
  short_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_short_frozen() const {
  return short_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::short_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.short_frozen)
  return _internal_short_frozen();
}
inline void InvestorPositionMessage::_internal_set_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  short_frozen_ = value;
}
inline void InvestorPositionMessage::set_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_short_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.short_frozen)
}

// double long_frozen_amount = 11;
inline void InvestorPositionMessage::clear_long_frozen_amount() {
  long_frozen_amount_ = 0;
}
inline double InvestorPositionMessage::_internal_long_frozen_amount() const {
  return long_frozen_amount_;
}
inline double InvestorPositionMessage::long_frozen_amount() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.long_frozen_amount)
  return _internal_long_frozen_amount();
}
inline void InvestorPositionMessage::_internal_set_long_frozen_amount(double value) {
  
  long_frozen_amount_ = value;
}
inline void InvestorPositionMessage::set_long_frozen_amount(double value) {
  _internal_set_long_frozen_amount(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.long_frozen_amount)
}

// double short_frozen_amount = 12;
inline void InvestorPositionMessage::clear_short_frozen_amount() {
  short_frozen_amount_ = 0;
}
inline double InvestorPositionMessage::_internal_short_frozen_amount() const {
  return short_frozen_amount_;
}
inline double InvestorPositionMessage::short_frozen_amount() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.short_frozen_amount)
  return _internal_short_frozen_amount();
}
inline void InvestorPositionMessage::_internal_set_short_frozen_amount(double value) {
  
  short_frozen_amount_ = value;
}
inline void InvestorPositionMessage::set_short_frozen_amount(double value) {
  _internal_set_short_frozen_amount(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.short_frozen_amount)
}

// int32 open_volume = 13;
inline void InvestorPositionMessage::clear_open_volume() {
  open_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_open_volume() const {
  return open_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::open_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.open_volume)
  return _internal_open_volume();
}
inline void InvestorPositionMessage::_internal_set_open_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_volume_ = value;
}
inline void InvestorPositionMessage::set_open_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.open_volume)
}

// int32 close_volume = 14;
inline void InvestorPositionMessage::clear_close_volume() {
  close_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_close_volume() const {
  return close_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::close_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.close_volume)
  return _internal_close_volume();
}
inline void InvestorPositionMessage::_internal_set_close_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  close_volume_ = value;
}
inline void InvestorPositionMessage::set_close_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_close_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.close_volume)
}

// double open_amount = 15;
inline void InvestorPositionMessage::clear_open_amount() {
  open_amount_ = 0;
}
inline double InvestorPositionMessage::_internal_open_amount() const {
  return open_amount_;
}
inline double InvestorPositionMessage::open_amount() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.open_amount)
  return _internal_open_amount();
}
inline void InvestorPositionMessage::_internal_set_open_amount(double value) {
  
  open_amount_ = value;
}
inline void InvestorPositionMessage::set_open_amount(double value) {
  _internal_set_open_amount(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.open_amount)
}

// double close_amount = 16;
inline void InvestorPositionMessage::clear_close_amount() {
  close_amount_ = 0;
}
inline double InvestorPositionMessage::_internal_close_amount() const {
  return close_amount_;
}
inline double InvestorPositionMessage::close_amount() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.close_amount)
  return _internal_close_amount();
}
inline void InvestorPositionMessage::_internal_set_close_amount(double value) {
  
  close_amount_ = value;
}
inline void InvestorPositionMessage::set_close_amount(double value) {
  _internal_set_close_amount(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.close_amount)
}

// double position_cost = 17;
inline void InvestorPositionMessage::clear_position_cost() {
  position_cost_ = 0;
}
inline double InvestorPositionMessage::_internal_position_cost() const {
  return position_cost_;
}
inline double InvestorPositionMessage::position_cost() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.position_cost)
  return _internal_position_cost();
}
inline void InvestorPositionMessage::_internal_set_position_cost(double value) {
  
  position_cost_ = value;
}
inline void InvestorPositionMessage::set_position_cost(double value) {
  _internal_set_position_cost(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.position_cost)
}

// double pre_margin = 18;
inline void InvestorPositionMessage::clear_pre_margin() {
  pre_margin_ = 0;
}
inline double InvestorPositionMessage::_internal_pre_margin() const {
  return pre_margin_;
}
inline double InvestorPositionMessage::pre_margin() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.pre_margin)
  return _internal_pre_margin();
}
inline void InvestorPositionMessage::_internal_set_pre_margin(double value) {
  
  pre_margin_ = value;
}
inline void InvestorPositionMessage::set_pre_margin(double value) {
  _internal_set_pre_margin(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.pre_margin)
}

// double use_margin = 19;
inline void InvestorPositionMessage::clear_use_margin() {
  use_margin_ = 0;
}
inline double InvestorPositionMessage::_internal_use_margin() const {
  return use_margin_;
}
inline double InvestorPositionMessage::use_margin() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.use_margin)
  return _internal_use_margin();
}
inline void InvestorPositionMessage::_internal_set_use_margin(double value) {
  
  use_margin_ = value;
}
inline void InvestorPositionMessage::set_use_margin(double value) {
  _internal_set_use_margin(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.use_margin)
}

// double frozen_margin = 20;
inline void InvestorPositionMessage::clear_frozen_margin() {
  frozen_margin_ = 0;
}
inline double InvestorPositionMessage::_internal_frozen_margin() const {
  return frozen_margin_;
}
inline double InvestorPositionMessage::frozen_margin() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.frozen_margin)
  return _internal_frozen_margin();
}
inline void InvestorPositionMessage::_internal_set_frozen_margin(double value) {
  
  frozen_margin_ = value;
}
inline void InvestorPositionMessage::set_frozen_margin(double value) {
  _internal_set_frozen_margin(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.frozen_margin)
}

// double frozen_cash = 21;
inline void InvestorPositionMessage::clear_frozen_cash() {
  frozen_cash_ = 0;
}
inline double InvestorPositionMessage::_internal_frozen_cash() const {
  return frozen_cash_;
}
inline double InvestorPositionMessage::frozen_cash() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.frozen_cash)
  return _internal_frozen_cash();
}
inline void InvestorPositionMessage::_internal_set_frozen_cash(double value) {
  
  frozen_cash_ = value;
}
inline void InvestorPositionMessage::set_frozen_cash(double value) {
  _internal_set_frozen_cash(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.frozen_cash)
}

// double frozen_commission = 22;
inline void InvestorPositionMessage::clear_frozen_commission() {
  frozen_commission_ = 0;
}
inline double InvestorPositionMessage::_internal_frozen_commission() const {
  return frozen_commission_;
}
inline double InvestorPositionMessage::frozen_commission() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.frozen_commission)
  return _internal_frozen_commission();
}
inline void InvestorPositionMessage::_internal_set_frozen_commission(double value) {
  
  frozen_commission_ = value;
}
inline void InvestorPositionMessage::set_frozen_commission(double value) {
  _internal_set_frozen_commission(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.frozen_commission)
}

// double cash_in = 23;
inline void InvestorPositionMessage::clear_cash_in() {
  cash_in_ = 0;
}
inline double InvestorPositionMessage::_internal_cash_in() const {
  return cash_in_;
}
inline double InvestorPositionMessage::cash_in() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.cash_in)
  return _internal_cash_in();
}
inline void InvestorPositionMessage::_internal_set_cash_in(double value) {
  
  cash_in_ = value;
}
inline void InvestorPositionMessage::set_cash_in(double value) {
  _internal_set_cash_in(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.cash_in)
}

// double commission = 24;
inline void InvestorPositionMessage::clear_commission() {
  commission_ = 0;
}
inline double InvestorPositionMessage::_internal_commission() const {
  return commission_;
}
inline double InvestorPositionMessage::commission() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.commission)
  return _internal_commission();
}
inline void InvestorPositionMessage::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void InvestorPositionMessage::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.commission)
}

// double close_profit = 25;
inline void InvestorPositionMessage::clear_close_profit() {
  close_profit_ = 0;
}
inline double InvestorPositionMessage::_internal_close_profit() const {
  return close_profit_;
}
inline double InvestorPositionMessage::close_profit() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.close_profit)
  return _internal_close_profit();
}
inline void InvestorPositionMessage::_internal_set_close_profit(double value) {
  
  close_profit_ = value;
}
inline void InvestorPositionMessage::set_close_profit(double value) {
  _internal_set_close_profit(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.close_profit)
}

// double position_profit = 26;
inline void InvestorPositionMessage::clear_position_profit() {
  position_profit_ = 0;
}
inline double InvestorPositionMessage::_internal_position_profit() const {
  return position_profit_;
}
inline double InvestorPositionMessage::position_profit() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.position_profit)
  return _internal_position_profit();
}
inline void InvestorPositionMessage::_internal_set_position_profit(double value) {
  
  position_profit_ = value;
}
inline void InvestorPositionMessage::set_position_profit(double value) {
  _internal_set_position_profit(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.position_profit)
}

// double pre_settlement_price = 27;
inline void InvestorPositionMessage::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double InvestorPositionMessage::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline double InvestorPositionMessage::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void InvestorPositionMessage::_internal_set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
}
inline void InvestorPositionMessage::set_pre_settlement_price(double value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.pre_settlement_price)
}

// double settlement_price = 28;
inline void InvestorPositionMessage::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double InvestorPositionMessage::_internal_settlement_price() const {
  return settlement_price_;
}
inline double InvestorPositionMessage::settlement_price() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.settlement_price)
  return _internal_settlement_price();
}
inline void InvestorPositionMessage::_internal_set_settlement_price(double value) {
  
  settlement_price_ = value;
}
inline void InvestorPositionMessage::set_settlement_price(double value) {
  _internal_set_settlement_price(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.settlement_price)
}

// string trading_day = 29;
inline void InvestorPositionMessage::clear_trading_day() {
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::trading_day() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.trading_day)
  return _internal_trading_day();
}
inline void InvestorPositionMessage::set_trading_day(const std::string& value) {
  _internal_set_trading_day(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.trading_day)
}
inline std::string* InvestorPositionMessage::mutable_trading_day() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.trading_day)
  return _internal_mutable_trading_day();
}
inline const std::string& InvestorPositionMessage::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void InvestorPositionMessage::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_trading_day(std::string&& value) {
  
  trading_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.trading_day)
}
inline void InvestorPositionMessage::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.trading_day)
}
inline void InvestorPositionMessage::set_trading_day(const char* value,
    size_t size) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.trading_day)
}
inline std::string* InvestorPositionMessage::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_trading_day() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.trading_day)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_trading_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.trading_day)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trading_day_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_trading_day(
    std::string* trading_day) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trading_day, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.trading_day)
}

// int32 settlement_id = 30;
inline void InvestorPositionMessage::clear_settlement_id() {
  settlement_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_settlement_id() const {
  return settlement_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::settlement_id() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.settlement_id)
  return _internal_settlement_id();
}
inline void InvestorPositionMessage::_internal_set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  settlement_id_ = value;
}
inline void InvestorPositionMessage::set_settlement_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_settlement_id(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.settlement_id)
}

// double open_cost = 31;
inline void InvestorPositionMessage::clear_open_cost() {
  open_cost_ = 0;
}
inline double InvestorPositionMessage::_internal_open_cost() const {
  return open_cost_;
}
inline double InvestorPositionMessage::open_cost() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.open_cost)
  return _internal_open_cost();
}
inline void InvestorPositionMessage::_internal_set_open_cost(double value) {
  
  open_cost_ = value;
}
inline void InvestorPositionMessage::set_open_cost(double value) {
  _internal_set_open_cost(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.open_cost)
}

// double exchange_margin = 32;
inline void InvestorPositionMessage::clear_exchange_margin() {
  exchange_margin_ = 0;
}
inline double InvestorPositionMessage::_internal_exchange_margin() const {
  return exchange_margin_;
}
inline double InvestorPositionMessage::exchange_margin() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.exchange_margin)
  return _internal_exchange_margin();
}
inline void InvestorPositionMessage::_internal_set_exchange_margin(double value) {
  
  exchange_margin_ = value;
}
inline void InvestorPositionMessage::set_exchange_margin(double value) {
  _internal_set_exchange_margin(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.exchange_margin)
}

// int32 comb_position = 33;
inline void InvestorPositionMessage::clear_comb_position() {
  comb_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_comb_position() const {
  return comb_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::comb_position() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.comb_position)
  return _internal_comb_position();
}
inline void InvestorPositionMessage::_internal_set_comb_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_position_ = value;
}
inline void InvestorPositionMessage::set_comb_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_position(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.comb_position)
}

// int32 comb_long_frozen = 34;
inline void InvestorPositionMessage::clear_comb_long_frozen() {
  comb_long_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_comb_long_frozen() const {
  return comb_long_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::comb_long_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.comb_long_frozen)
  return _internal_comb_long_frozen();
}
inline void InvestorPositionMessage::_internal_set_comb_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_long_frozen_ = value;
}
inline void InvestorPositionMessage::set_comb_long_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_long_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.comb_long_frozen)
}

// int32 comb_short_frozen = 35;
inline void InvestorPositionMessage::clear_comb_short_frozen() {
  comb_short_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_comb_short_frozen() const {
  return comb_short_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::comb_short_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.comb_short_frozen)
  return _internal_comb_short_frozen();
}
inline void InvestorPositionMessage::_internal_set_comb_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  comb_short_frozen_ = value;
}
inline void InvestorPositionMessage::set_comb_short_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_comb_short_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.comb_short_frozen)
}

// double close_profit_by_date = 36;
inline void InvestorPositionMessage::clear_close_profit_by_date() {
  close_profit_by_date_ = 0;
}
inline double InvestorPositionMessage::_internal_close_profit_by_date() const {
  return close_profit_by_date_;
}
inline double InvestorPositionMessage::close_profit_by_date() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.close_profit_by_date)
  return _internal_close_profit_by_date();
}
inline void InvestorPositionMessage::_internal_set_close_profit_by_date(double value) {
  
  close_profit_by_date_ = value;
}
inline void InvestorPositionMessage::set_close_profit_by_date(double value) {
  _internal_set_close_profit_by_date(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.close_profit_by_date)
}

// double close_profit_by_trade = 37;
inline void InvestorPositionMessage::clear_close_profit_by_trade() {
  close_profit_by_trade_ = 0;
}
inline double InvestorPositionMessage::_internal_close_profit_by_trade() const {
  return close_profit_by_trade_;
}
inline double InvestorPositionMessage::close_profit_by_trade() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.close_profit_by_trade)
  return _internal_close_profit_by_trade();
}
inline void InvestorPositionMessage::_internal_set_close_profit_by_trade(double value) {
  
  close_profit_by_trade_ = value;
}
inline void InvestorPositionMessage::set_close_profit_by_trade(double value) {
  _internal_set_close_profit_by_trade(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.close_profit_by_trade)
}

// int32 today_position = 38;
inline void InvestorPositionMessage::clear_today_position() {
  today_position_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_today_position() const {
  return today_position_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::today_position() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.today_position)
  return _internal_today_position();
}
inline void InvestorPositionMessage::_internal_set_today_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  today_position_ = value;
}
inline void InvestorPositionMessage::set_today_position(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_today_position(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.today_position)
}

// double margin_rate_by_money = 39;
inline void InvestorPositionMessage::clear_margin_rate_by_money() {
  margin_rate_by_money_ = 0;
}
inline double InvestorPositionMessage::_internal_margin_rate_by_money() const {
  return margin_rate_by_money_;
}
inline double InvestorPositionMessage::margin_rate_by_money() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.margin_rate_by_money)
  return _internal_margin_rate_by_money();
}
inline void InvestorPositionMessage::_internal_set_margin_rate_by_money(double value) {
  
  margin_rate_by_money_ = value;
}
inline void InvestorPositionMessage::set_margin_rate_by_money(double value) {
  _internal_set_margin_rate_by_money(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.margin_rate_by_money)
}

// double margin_rate_by_volume = 40;
inline void InvestorPositionMessage::clear_margin_rate_by_volume() {
  margin_rate_by_volume_ = 0;
}
inline double InvestorPositionMessage::_internal_margin_rate_by_volume() const {
  return margin_rate_by_volume_;
}
inline double InvestorPositionMessage::margin_rate_by_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.margin_rate_by_volume)
  return _internal_margin_rate_by_volume();
}
inline void InvestorPositionMessage::_internal_set_margin_rate_by_volume(double value) {
  
  margin_rate_by_volume_ = value;
}
inline void InvestorPositionMessage::set_margin_rate_by_volume(double value) {
  _internal_set_margin_rate_by_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.margin_rate_by_volume)
}

// int32 strike_frozen = 41;
inline void InvestorPositionMessage::clear_strike_frozen() {
  strike_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_strike_frozen() const {
  return strike_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::strike_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.strike_frozen)
  return _internal_strike_frozen();
}
inline void InvestorPositionMessage::_internal_set_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strike_frozen_ = value;
}
inline void InvestorPositionMessage::set_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strike_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.strike_frozen)
}

// double strike_frozen_amount = 42;
inline void InvestorPositionMessage::clear_strike_frozen_amount() {
  strike_frozen_amount_ = 0;
}
inline double InvestorPositionMessage::_internal_strike_frozen_amount() const {
  return strike_frozen_amount_;
}
inline double InvestorPositionMessage::strike_frozen_amount() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.strike_frozen_amount)
  return _internal_strike_frozen_amount();
}
inline void InvestorPositionMessage::_internal_set_strike_frozen_amount(double value) {
  
  strike_frozen_amount_ = value;
}
inline void InvestorPositionMessage::set_strike_frozen_amount(double value) {
  _internal_set_strike_frozen_amount(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.strike_frozen_amount)
}

// int32 abandon_frozen = 43;
inline void InvestorPositionMessage::clear_abandon_frozen() {
  abandon_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_abandon_frozen() const {
  return abandon_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::abandon_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.abandon_frozen)
  return _internal_abandon_frozen();
}
inline void InvestorPositionMessage::_internal_set_abandon_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  abandon_frozen_ = value;
}
inline void InvestorPositionMessage::set_abandon_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_abandon_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.abandon_frozen)
}

// string exchange_id = 44;
inline void InvestorPositionMessage::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::exchange_id() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.exchange_id)
  return _internal_exchange_id();
}
inline void InvestorPositionMessage::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.exchange_id)
}
inline std::string* InvestorPositionMessage::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& InvestorPositionMessage::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void InvestorPositionMessage::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.exchange_id)
}
inline void InvestorPositionMessage::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.exchange_id)
}
inline void InvestorPositionMessage::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.exchange_id)
}
inline std::string* InvestorPositionMessage::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_exchange_id() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.exchange_id)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_exchange_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.exchange_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_exchange_id(
    std::string* exchange_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.exchange_id)
}

// int32 yd_strike_frozen = 45;
inline void InvestorPositionMessage::clear_yd_strike_frozen() {
  yd_strike_frozen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::_internal_yd_strike_frozen() const {
  return yd_strike_frozen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvestorPositionMessage::yd_strike_frozen() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.yd_strike_frozen)
  return _internal_yd_strike_frozen();
}
inline void InvestorPositionMessage::_internal_set_yd_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yd_strike_frozen_ = value;
}
inline void InvestorPositionMessage::set_yd_strike_frozen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yd_strike_frozen(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.yd_strike_frozen)
}

// string invest_unit_id = 46;
inline void InvestorPositionMessage::clear_invest_unit_id() {
  invest_unit_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionMessage::invest_unit_id() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.invest_unit_id)
  return _internal_invest_unit_id();
}
inline void InvestorPositionMessage::set_invest_unit_id(const std::string& value) {
  _internal_set_invest_unit_id(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.invest_unit_id)
}
inline std::string* InvestorPositionMessage::mutable_invest_unit_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionMessage.invest_unit_id)
  return _internal_mutable_invest_unit_id();
}
inline const std::string& InvestorPositionMessage::_internal_invest_unit_id() const {
  return invest_unit_id_.Get();
}
inline void InvestorPositionMessage::_internal_set_invest_unit_id(const std::string& value) {
  
  invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionMessage::set_invest_unit_id(std::string&& value) {
  
  invest_unit_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionMessage.invest_unit_id)
}
inline void InvestorPositionMessage::set_invest_unit_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionMessage.invest_unit_id)
}
inline void InvestorPositionMessage::set_invest_unit_id(const char* value,
    size_t size) {
  
  invest_unit_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionMessage.invest_unit_id)
}
inline std::string* InvestorPositionMessage::_internal_mutable_invest_unit_id() {
  
  return invest_unit_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionMessage::release_invest_unit_id() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionMessage.invest_unit_id)
  return invest_unit_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionMessage::set_allocated_invest_unit_id(std::string* invest_unit_id) {
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invest_unit_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionMessage.invest_unit_id)
}
inline std::string* InvestorPositionMessage::unsafe_arena_release_invest_unit_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionMessage.invest_unit_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return invest_unit_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionMessage::unsafe_arena_set_allocated_invest_unit_id(
    std::string* invest_unit_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invest_unit_id != nullptr) {
    
  } else {
    
  }
  invest_unit_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invest_unit_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionMessage.invest_unit_id)
}

// double position_cost_offset = 47;
inline void InvestorPositionMessage::clear_position_cost_offset() {
  position_cost_offset_ = 0;
}
inline double InvestorPositionMessage::_internal_position_cost_offset() const {
  return position_cost_offset_;
}
inline double InvestorPositionMessage::position_cost_offset() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionMessage.position_cost_offset)
  return _internal_position_cost_offset();
}
inline void InvestorPositionMessage::_internal_set_position_cost_offset(double value) {
  
  position_cost_offset_ = value;
}
inline void InvestorPositionMessage::set_position_cost_offset(double value) {
  _internal_set_position_cost_offset(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionMessage.position_cost_offset)
}

// -------------------------------------------------------------------

// InvestorPositionBatchMessage

// int64 timestamp = 1;
inline void InvestorPositionBatchMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InvestorPositionBatchMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InvestorPositionBatchMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionBatchMessage.timestamp)
  return _internal_timestamp();
}
inline void InvestorPositionBatchMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void InvestorPositionBatchMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionBatchMessage.timestamp)
}

// string message_type = 2;
inline void InvestorPositionBatchMessage::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InvestorPositionBatchMessage::message_type() const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionBatchMessage.message_type)
  return _internal_message_type();
}
inline void InvestorPositionBatchMessage::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:ctp.InvestorPositionBatchMessage.message_type)
}
inline std::string* InvestorPositionBatchMessage::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionBatchMessage.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& InvestorPositionBatchMessage::_internal_message_type() const {
  return message_type_.Get();
}
inline void InvestorPositionBatchMessage::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InvestorPositionBatchMessage::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InvestorPositionBatchMessage.message_type)
}
inline void InvestorPositionBatchMessage::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InvestorPositionBatchMessage.message_type)
}
inline void InvestorPositionBatchMessage::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InvestorPositionBatchMessage.message_type)
}
inline std::string* InvestorPositionBatchMessage::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InvestorPositionBatchMessage::release_message_type() {
  // @@protoc_insertion_point(field_release:ctp.InvestorPositionBatchMessage.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InvestorPositionBatchMessage::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InvestorPositionBatchMessage.message_type)
}
inline std::string* InvestorPositionBatchMessage::unsafe_arena_release_message_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InvestorPositionBatchMessage.message_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InvestorPositionBatchMessage::unsafe_arena_set_allocated_message_type(
    std::string* message_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InvestorPositionBatchMessage.message_type)
}

// repeated .ctp.InvestorPositionMessage positions = 3;
inline int InvestorPositionBatchMessage::_internal_positions_size() const {
  return positions_.size();
}
inline int InvestorPositionBatchMessage::positions_size() const {
  return _internal_positions_size();
}
inline void InvestorPositionBatchMessage::clear_positions() {
  positions_.Clear();
}
inline ::ctp::InvestorPositionMessage* InvestorPositionBatchMessage::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:ctp.InvestorPositionBatchMessage.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InvestorPositionMessage >*
InvestorPositionBatchMessage::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:ctp.InvestorPositionBatchMessage.positions)
  return &positions_;
}
inline const ::ctp::InvestorPositionMessage& InvestorPositionBatchMessage::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::ctp::InvestorPositionMessage& InvestorPositionBatchMessage::positions(int index) const {
  // @@protoc_insertion_point(field_get:ctp.InvestorPositionBatchMessage.positions)
  return _internal_positions(index);
}
inline ::ctp::InvestorPositionMessage* InvestorPositionBatchMessage::_internal_add_positions() {
  return positions_.Add();
}
inline ::ctp::InvestorPositionMessage* InvestorPositionBatchMessage::add_positions() {
  // @@protoc_insertion_point(field_add:ctp.InvestorPositionBatchMessage.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InvestorPositionMessage >&
InvestorPositionBatchMessage::positions() const {
  // @@protoc_insertion_point(field_list:ctp.InvestorPositionBatchMessage.positions)
  return positions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ctp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2finvestor_5fposition_2eproto
