// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instrument.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_instrument_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_instrument_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_instrument_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_instrument_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instrument_2eproto;
namespace ctp {
class InstrumentBatchMessage;
class InstrumentBatchMessageDefaultTypeInternal;
extern InstrumentBatchMessageDefaultTypeInternal _InstrumentBatchMessage_default_instance_;
class InstrumentMessage;
class InstrumentMessageDefaultTypeInternal;
extern InstrumentMessageDefaultTypeInternal _InstrumentMessage_default_instance_;
}  // namespace ctp
PROTOBUF_NAMESPACE_OPEN
template<> ::ctp::InstrumentBatchMessage* Arena::CreateMaybeMessage<::ctp::InstrumentBatchMessage>(Arena*);
template<> ::ctp::InstrumentMessage* Arena::CreateMaybeMessage<::ctp::InstrumentMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ctp {

// ===================================================================

class InstrumentMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ctp.InstrumentMessage) */ {
 public:
  inline InstrumentMessage() : InstrumentMessage(nullptr) {};
  virtual ~InstrumentMessage();

  InstrumentMessage(const InstrumentMessage& from);
  InstrumentMessage(InstrumentMessage&& from) noexcept
    : InstrumentMessage() {
    *this = ::std::move(from);
  }

  inline InstrumentMessage& operator=(const InstrumentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentMessage& operator=(InstrumentMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentMessage* internal_default_instance() {
    return reinterpret_cast<const InstrumentMessage*>(
               &_InstrumentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InstrumentMessage& a, InstrumentMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentMessage* New() const final {
    return CreateMaybeMessage<InstrumentMessage>(nullptr);
  }

  InstrumentMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentMessage& from);
  void MergeFrom(const InstrumentMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ctp.InstrumentMessage";
  }
  protected:
  explicit InstrumentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instrument_2eproto);
    return ::descriptor_table_instrument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentIdFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kInstrumentNameFieldNumber = 3,
    kExchangeInstIdFieldNumber = 4,
    kProductIdFieldNumber = 5,
    kProductClassFieldNumber = 6,
    kCreateDateFieldNumber = 15,
    kOpenDateFieldNumber = 16,
    kExpireDateFieldNumber = 17,
    kStartDelivDateFieldNumber = 18,
    kEndDelivDateFieldNumber = 19,
    kInstLifePhaseFieldNumber = 20,
    kPositionTypeFieldNumber = 22,
    kPositionDateTypeFieldNumber = 23,
    kMaxMarginSideAlgorithmFieldNumber = 26,
    kUnderlyingInstrIdFieldNumber = 27,
    kOptionsTypeFieldNumber = 29,
    kCombinationTypeFieldNumber = 31,
    kDeliveryYearFieldNumber = 7,
    kDeliveryMonthFieldNumber = 8,
    kMaxMarketOrderVolumeFieldNumber = 9,
    kMinMarketOrderVolumeFieldNumber = 10,
    kMaxLimitOrderVolumeFieldNumber = 11,
    kMinLimitOrderVolumeFieldNumber = 12,
    kPriceTickFieldNumber = 14,
    kVolumeMultipleFieldNumber = 13,
    kIsTradingFieldNumber = 21,
    kLongMarginRatioFieldNumber = 24,
    kShortMarginRatioFieldNumber = 25,
    kStrikePriceFieldNumber = 28,
    kUnderlyingMultipleFieldNumber = 30,
  };
  // string instrument_id = 1;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_id(
      std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_id = 2;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_id(
      std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string instrument_name = 3;
  void clear_instrument_name();
  const std::string& instrument_name() const;
  void set_instrument_name(const std::string& value);
  void set_instrument_name(std::string&& value);
  void set_instrument_name(const char* value);
  void set_instrument_name(const char* value, size_t size);
  std::string* mutable_instrument_name();
  std::string* release_instrument_name();
  void set_allocated_instrument_name(std::string* instrument_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_name(
      std::string* instrument_name);
  private:
  const std::string& _internal_instrument_name() const;
  void _internal_set_instrument_name(const std::string& value);
  std::string* _internal_mutable_instrument_name();
  public:

  // string exchange_inst_id = 4;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  void set_exchange_inst_id(const std::string& value);
  void set_exchange_inst_id(std::string&& value);
  void set_exchange_inst_id(const char* value);
  void set_exchange_inst_id(const char* value, size_t size);
  std::string* mutable_exchange_inst_id();
  std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_inst_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_inst_id(
      std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string product_id = 5;
  void clear_product_id();
  const std::string& product_id() const;
  void set_product_id(const std::string& value);
  void set_product_id(std::string&& value);
  void set_product_id(const char* value);
  void set_product_id(const char* value, size_t size);
  std::string* mutable_product_id();
  std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_product_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_product_id(
      std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // string product_class = 6;
  void clear_product_class();
  const std::string& product_class() const;
  void set_product_class(const std::string& value);
  void set_product_class(std::string&& value);
  void set_product_class(const char* value);
  void set_product_class(const char* value, size_t size);
  std::string* mutable_product_class();
  std::string* release_product_class();
  void set_allocated_product_class(std::string* product_class);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_product_class();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_product_class(
      std::string* product_class);
  private:
  const std::string& _internal_product_class() const;
  void _internal_set_product_class(const std::string& value);
  std::string* _internal_mutable_product_class();
  public:

  // string create_date = 15;
  void clear_create_date();
  const std::string& create_date() const;
  void set_create_date(const std::string& value);
  void set_create_date(std::string&& value);
  void set_create_date(const char* value);
  void set_create_date(const char* value, size_t size);
  std::string* mutable_create_date();
  std::string* release_create_date();
  void set_allocated_create_date(std::string* create_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_create_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_create_date(
      std::string* create_date);
  private:
  const std::string& _internal_create_date() const;
  void _internal_set_create_date(const std::string& value);
  std::string* _internal_mutable_create_date();
  public:

  // string open_date = 16;
  void clear_open_date();
  const std::string& open_date() const;
  void set_open_date(const std::string& value);
  void set_open_date(std::string&& value);
  void set_open_date(const char* value);
  void set_open_date(const char* value, size_t size);
  std::string* mutable_open_date();
  std::string* release_open_date();
  void set_allocated_open_date(std::string* open_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_open_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_open_date(
      std::string* open_date);
  private:
  const std::string& _internal_open_date() const;
  void _internal_set_open_date(const std::string& value);
  std::string* _internal_mutable_open_date();
  public:

  // string expire_date = 17;
  void clear_expire_date();
  const std::string& expire_date() const;
  void set_expire_date(const std::string& value);
  void set_expire_date(std::string&& value);
  void set_expire_date(const char* value);
  void set_expire_date(const char* value, size_t size);
  std::string* mutable_expire_date();
  std::string* release_expire_date();
  void set_allocated_expire_date(std::string* expire_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_expire_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_expire_date(
      std::string* expire_date);
  private:
  const std::string& _internal_expire_date() const;
  void _internal_set_expire_date(const std::string& value);
  std::string* _internal_mutable_expire_date();
  public:

  // string start_deliv_date = 18;
  void clear_start_deliv_date();
  const std::string& start_deliv_date() const;
  void set_start_deliv_date(const std::string& value);
  void set_start_deliv_date(std::string&& value);
  void set_start_deliv_date(const char* value);
  void set_start_deliv_date(const char* value, size_t size);
  std::string* mutable_start_deliv_date();
  std::string* release_start_deliv_date();
  void set_allocated_start_deliv_date(std::string* start_deliv_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_start_deliv_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_start_deliv_date(
      std::string* start_deliv_date);
  private:
  const std::string& _internal_start_deliv_date() const;
  void _internal_set_start_deliv_date(const std::string& value);
  std::string* _internal_mutable_start_deliv_date();
  public:

  // string end_deliv_date = 19;
  void clear_end_deliv_date();
  const std::string& end_deliv_date() const;
  void set_end_deliv_date(const std::string& value);
  void set_end_deliv_date(std::string&& value);
  void set_end_deliv_date(const char* value);
  void set_end_deliv_date(const char* value, size_t size);
  std::string* mutable_end_deliv_date();
  std::string* release_end_deliv_date();
  void set_allocated_end_deliv_date(std::string* end_deliv_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_end_deliv_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_end_deliv_date(
      std::string* end_deliv_date);
  private:
  const std::string& _internal_end_deliv_date() const;
  void _internal_set_end_deliv_date(const std::string& value);
  std::string* _internal_mutable_end_deliv_date();
  public:

  // string inst_life_phase = 20;
  void clear_inst_life_phase();
  const std::string& inst_life_phase() const;
  void set_inst_life_phase(const std::string& value);
  void set_inst_life_phase(std::string&& value);
  void set_inst_life_phase(const char* value);
  void set_inst_life_phase(const char* value, size_t size);
  std::string* mutable_inst_life_phase();
  std::string* release_inst_life_phase();
  void set_allocated_inst_life_phase(std::string* inst_life_phase);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inst_life_phase();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inst_life_phase(
      std::string* inst_life_phase);
  private:
  const std::string& _internal_inst_life_phase() const;
  void _internal_set_inst_life_phase(const std::string& value);
  std::string* _internal_mutable_inst_life_phase();
  public:

  // string position_type = 22;
  void clear_position_type();
  const std::string& position_type() const;
  void set_position_type(const std::string& value);
  void set_position_type(std::string&& value);
  void set_position_type(const char* value);
  void set_position_type(const char* value, size_t size);
  std::string* mutable_position_type();
  std::string* release_position_type();
  void set_allocated_position_type(std::string* position_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_position_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_position_type(
      std::string* position_type);
  private:
  const std::string& _internal_position_type() const;
  void _internal_set_position_type(const std::string& value);
  std::string* _internal_mutable_position_type();
  public:

  // string position_date_type = 23;
  void clear_position_date_type();
  const std::string& position_date_type() const;
  void set_position_date_type(const std::string& value);
  void set_position_date_type(std::string&& value);
  void set_position_date_type(const char* value);
  void set_position_date_type(const char* value, size_t size);
  std::string* mutable_position_date_type();
  std::string* release_position_date_type();
  void set_allocated_position_date_type(std::string* position_date_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_position_date_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_position_date_type(
      std::string* position_date_type);
  private:
  const std::string& _internal_position_date_type() const;
  void _internal_set_position_date_type(const std::string& value);
  std::string* _internal_mutable_position_date_type();
  public:

  // string max_margin_side_algorithm = 26;
  void clear_max_margin_side_algorithm();
  const std::string& max_margin_side_algorithm() const;
  void set_max_margin_side_algorithm(const std::string& value);
  void set_max_margin_side_algorithm(std::string&& value);
  void set_max_margin_side_algorithm(const char* value);
  void set_max_margin_side_algorithm(const char* value, size_t size);
  std::string* mutable_max_margin_side_algorithm();
  std::string* release_max_margin_side_algorithm();
  void set_allocated_max_margin_side_algorithm(std::string* max_margin_side_algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_max_margin_side_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_max_margin_side_algorithm(
      std::string* max_margin_side_algorithm);
  private:
  const std::string& _internal_max_margin_side_algorithm() const;
  void _internal_set_max_margin_side_algorithm(const std::string& value);
  std::string* _internal_mutable_max_margin_side_algorithm();
  public:

  // string underlying_instr_id = 27;
  void clear_underlying_instr_id();
  const std::string& underlying_instr_id() const;
  void set_underlying_instr_id(const std::string& value);
  void set_underlying_instr_id(std::string&& value);
  void set_underlying_instr_id(const char* value);
  void set_underlying_instr_id(const char* value, size_t size);
  std::string* mutable_underlying_instr_id();
  std::string* release_underlying_instr_id();
  void set_allocated_underlying_instr_id(std::string* underlying_instr_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_underlying_instr_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_underlying_instr_id(
      std::string* underlying_instr_id);
  private:
  const std::string& _internal_underlying_instr_id() const;
  void _internal_set_underlying_instr_id(const std::string& value);
  std::string* _internal_mutable_underlying_instr_id();
  public:

  // string options_type = 29;
  void clear_options_type();
  const std::string& options_type() const;
  void set_options_type(const std::string& value);
  void set_options_type(std::string&& value);
  void set_options_type(const char* value);
  void set_options_type(const char* value, size_t size);
  std::string* mutable_options_type();
  std::string* release_options_type();
  void set_allocated_options_type(std::string* options_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_options_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_options_type(
      std::string* options_type);
  private:
  const std::string& _internal_options_type() const;
  void _internal_set_options_type(const std::string& value);
  std::string* _internal_mutable_options_type();
  public:

  // string combination_type = 31;
  void clear_combination_type();
  const std::string& combination_type() const;
  void set_combination_type(const std::string& value);
  void set_combination_type(std::string&& value);
  void set_combination_type(const char* value);
  void set_combination_type(const char* value, size_t size);
  std::string* mutable_combination_type();
  std::string* release_combination_type();
  void set_allocated_combination_type(std::string* combination_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_combination_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_combination_type(
      std::string* combination_type);
  private:
  const std::string& _internal_combination_type() const;
  void _internal_set_combination_type(const std::string& value);
  std::string* _internal_mutable_combination_type();
  public:

  // int32 delivery_year = 7;
  void clear_delivery_year();
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_year() const;
  void set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delivery_year() const;
  void _internal_set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 delivery_month = 8;
  void clear_delivery_month();
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_month() const;
  void set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delivery_month() const;
  void _internal_set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_market_order_volume = 9;
  void clear_max_market_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 max_market_order_volume() const;
  void set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_market_order_volume() const;
  void _internal_set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_market_order_volume = 10;
  void clear_min_market_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 min_market_order_volume() const;
  void set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_market_order_volume() const;
  void _internal_set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_limit_order_volume = 11;
  void clear_max_limit_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 max_limit_order_volume() const;
  void set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_limit_order_volume() const;
  void _internal_set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_limit_order_volume = 12;
  void clear_min_limit_order_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 min_limit_order_volume() const;
  void set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_limit_order_volume() const;
  void _internal_set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double price_tick = 14;
  void clear_price_tick();
  double price_tick() const;
  void set_price_tick(double value);
  private:
  double _internal_price_tick() const;
  void _internal_set_price_tick(double value);
  public:

  // int32 volume_multiple = 13;
  void clear_volume_multiple();
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple() const;
  void set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume_multiple() const;
  void _internal_set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_trading = 21;
  void clear_is_trading();
  ::PROTOBUF_NAMESPACE_ID::int32 is_trading() const;
  void set_is_trading(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_trading() const;
  void _internal_set_is_trading(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double long_margin_ratio = 24;
  void clear_long_margin_ratio();
  double long_margin_ratio() const;
  void set_long_margin_ratio(double value);
  private:
  double _internal_long_margin_ratio() const;
  void _internal_set_long_margin_ratio(double value);
  public:

  // double short_margin_ratio = 25;
  void clear_short_margin_ratio();
  double short_margin_ratio() const;
  void set_short_margin_ratio(double value);
  private:
  double _internal_short_margin_ratio() const;
  void _internal_set_short_margin_ratio(double value);
  public:

  // double strike_price = 28;
  void clear_strike_price();
  double strike_price() const;
  void set_strike_price(double value);
  private:
  double _internal_strike_price() const;
  void _internal_set_strike_price(double value);
  public:

  // double underlying_multiple = 30;
  void clear_underlying_multiple();
  double underlying_multiple() const;
  void set_underlying_multiple(double value);
  private:
  double _internal_underlying_multiple() const;
  void _internal_set_underlying_multiple(double value);
  public:

  // @@protoc_insertion_point(class_scope:ctp.InstrumentMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr create_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expire_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_deliv_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inst_life_phase_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_date_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_margin_side_algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_instr_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr options_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combination_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_year_;
  ::PROTOBUF_NAMESPACE_ID::int32 delivery_month_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_market_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_market_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_limit_order_volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_limit_order_volume_;
  double price_tick_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_multiple_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_trading_;
  double long_margin_ratio_;
  double short_margin_ratio_;
  double strike_price_;
  double underlying_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instrument_2eproto;
};
// -------------------------------------------------------------------

class InstrumentBatchMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ctp.InstrumentBatchMessage) */ {
 public:
  inline InstrumentBatchMessage() : InstrumentBatchMessage(nullptr) {};
  virtual ~InstrumentBatchMessage();

  InstrumentBatchMessage(const InstrumentBatchMessage& from);
  InstrumentBatchMessage(InstrumentBatchMessage&& from) noexcept
    : InstrumentBatchMessage() {
    *this = ::std::move(from);
  }

  inline InstrumentBatchMessage& operator=(const InstrumentBatchMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentBatchMessage& operator=(InstrumentBatchMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstrumentBatchMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstrumentBatchMessage* internal_default_instance() {
    return reinterpret_cast<const InstrumentBatchMessage*>(
               &_InstrumentBatchMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InstrumentBatchMessage& a, InstrumentBatchMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InstrumentBatchMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentBatchMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InstrumentBatchMessage* New() const final {
    return CreateMaybeMessage<InstrumentBatchMessage>(nullptr);
  }

  InstrumentBatchMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstrumentBatchMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstrumentBatchMessage& from);
  void MergeFrom(const InstrumentBatchMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstrumentBatchMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ctp.InstrumentBatchMessage";
  }
  protected:
  explicit InstrumentBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instrument_2eproto);
    return ::descriptor_table_instrument_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstrumentsFieldNumber = 1,
    kMessageTypeFieldNumber = 3,
    kTimestampFieldNumber = 2,
  };
  // repeated .ctp.InstrumentMessage instruments = 1;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;
  public:
  void clear_instruments();
  ::ctp::InstrumentMessage* mutable_instruments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InstrumentMessage >*
      mutable_instruments();
  private:
  const ::ctp::InstrumentMessage& _internal_instruments(int index) const;
  ::ctp::InstrumentMessage* _internal_add_instruments();
  public:
  const ::ctp::InstrumentMessage& instruments(int index) const;
  ::ctp::InstrumentMessage* add_instruments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InstrumentMessage >&
      instruments() const;

  // string message_type = 3;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_type(
      std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ctp.InstrumentBatchMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InstrumentMessage > instruments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_instrument_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InstrumentMessage

// string instrument_id = 1;
inline void InstrumentMessage::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::instrument_id() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.instrument_id)
  return _internal_instrument_id();
}
inline void InstrumentMessage::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.instrument_id)
}
inline std::string* InstrumentMessage::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& InstrumentMessage::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void InstrumentMessage::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.instrument_id)
}
inline void InstrumentMessage::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.instrument_id)
}
inline void InstrumentMessage::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.instrument_id)
}
inline std::string* InstrumentMessage::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_instrument_id() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.instrument_id)
}
inline std::string* InstrumentMessage::unsafe_arena_release_instrument_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.instrument_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_instrument_id(
    std::string* instrument_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.instrument_id)
}

// string exchange_id = 2;
inline void InstrumentMessage::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::exchange_id() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.exchange_id)
  return _internal_exchange_id();
}
inline void InstrumentMessage::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.exchange_id)
}
inline std::string* InstrumentMessage::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& InstrumentMessage::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void InstrumentMessage::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.exchange_id)
}
inline void InstrumentMessage::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.exchange_id)
}
inline void InstrumentMessage::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.exchange_id)
}
inline std::string* InstrumentMessage::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_exchange_id() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.exchange_id)
}
inline std::string* InstrumentMessage::unsafe_arena_release_exchange_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.exchange_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_exchange_id(
    std::string* exchange_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.exchange_id)
}

// string instrument_name = 3;
inline void InstrumentMessage::clear_instrument_name() {
  instrument_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::instrument_name() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.instrument_name)
  return _internal_instrument_name();
}
inline void InstrumentMessage::set_instrument_name(const std::string& value) {
  _internal_set_instrument_name(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.instrument_name)
}
inline std::string* InstrumentMessage::mutable_instrument_name() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.instrument_name)
  return _internal_mutable_instrument_name();
}
inline const std::string& InstrumentMessage::_internal_instrument_name() const {
  return instrument_name_.Get();
}
inline void InstrumentMessage::_internal_set_instrument_name(const std::string& value) {
  
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_instrument_name(std::string&& value) {
  
  instrument_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.instrument_name)
}
inline void InstrumentMessage::set_instrument_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.instrument_name)
}
inline void InstrumentMessage::set_instrument_name(const char* value,
    size_t size) {
  
  instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.instrument_name)
}
inline std::string* InstrumentMessage::_internal_mutable_instrument_name() {
  
  return instrument_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_instrument_name() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.instrument_name)
  return instrument_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_instrument_name(std::string* instrument_name) {
  if (instrument_name != nullptr) {
    
  } else {
    
  }
  instrument_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.instrument_name)
}
inline std::string* InstrumentMessage::unsafe_arena_release_instrument_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.instrument_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_instrument_name(
    std::string* instrument_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_name != nullptr) {
    
  } else {
    
  }
  instrument_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.instrument_name)
}

// string exchange_inst_id = 4;
inline void InstrumentMessage::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.exchange_inst_id)
  return _internal_exchange_inst_id();
}
inline void InstrumentMessage::set_exchange_inst_id(const std::string& value) {
  _internal_set_exchange_inst_id(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.exchange_inst_id)
}
inline std::string* InstrumentMessage::mutable_exchange_inst_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.exchange_inst_id)
  return _internal_mutable_exchange_inst_id();
}
inline const std::string& InstrumentMessage::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void InstrumentMessage::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_exchange_inst_id(std::string&& value) {
  
  exchange_inst_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.exchange_inst_id)
}
inline void InstrumentMessage::set_exchange_inst_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.exchange_inst_id)
}
inline void InstrumentMessage::set_exchange_inst_id(const char* value,
    size_t size) {
  
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.exchange_inst_id)
}
inline std::string* InstrumentMessage::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.exchange_inst_id)
}
inline std::string* InstrumentMessage::unsafe_arena_release_exchange_inst_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.exchange_inst_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_inst_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_exchange_inst_id(
    std::string* exchange_inst_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_inst_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.exchange_inst_id)
}

// string product_id = 5;
inline void InstrumentMessage::clear_product_id() {
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::product_id() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.product_id)
  return _internal_product_id();
}
inline void InstrumentMessage::set_product_id(const std::string& value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.product_id)
}
inline std::string* InstrumentMessage::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& InstrumentMessage::_internal_product_id() const {
  return product_id_.Get();
}
inline void InstrumentMessage::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_product_id(std::string&& value) {
  
  product_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.product_id)
}
inline void InstrumentMessage::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.product_id)
}
inline void InstrumentMessage::set_product_id(const char* value,
    size_t size) {
  
  product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.product_id)
}
inline std::string* InstrumentMessage::_internal_mutable_product_id() {
  
  return product_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_product_id() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.product_id)
}
inline std::string* InstrumentMessage::unsafe_arena_release_product_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.product_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return product_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_product_id(
    std::string* product_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      product_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.product_id)
}

// string product_class = 6;
inline void InstrumentMessage::clear_product_class() {
  product_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::product_class() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.product_class)
  return _internal_product_class();
}
inline void InstrumentMessage::set_product_class(const std::string& value) {
  _internal_set_product_class(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.product_class)
}
inline std::string* InstrumentMessage::mutable_product_class() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.product_class)
  return _internal_mutable_product_class();
}
inline const std::string& InstrumentMessage::_internal_product_class() const {
  return product_class_.Get();
}
inline void InstrumentMessage::_internal_set_product_class(const std::string& value) {
  
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_product_class(std::string&& value) {
  
  product_class_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.product_class)
}
inline void InstrumentMessage::set_product_class(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.product_class)
}
inline void InstrumentMessage::set_product_class(const char* value,
    size_t size) {
  
  product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.product_class)
}
inline std::string* InstrumentMessage::_internal_mutable_product_class() {
  
  return product_class_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_product_class() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.product_class)
  return product_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_product_class(std::string* product_class) {
  if (product_class != nullptr) {
    
  } else {
    
  }
  product_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_class,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.product_class)
}
inline std::string* InstrumentMessage::unsafe_arena_release_product_class() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.product_class)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return product_class_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_product_class(
    std::string* product_class) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (product_class != nullptr) {
    
  } else {
    
  }
  product_class_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      product_class, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.product_class)
}

// int32 delivery_year = 7;
inline void InstrumentMessage::clear_delivery_year() {
  delivery_year_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_delivery_year() const {
  return delivery_year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::delivery_year() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.delivery_year)
  return _internal_delivery_year();
}
inline void InstrumentMessage::_internal_set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delivery_year_ = value;
}
inline void InstrumentMessage::set_delivery_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delivery_year(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.delivery_year)
}

// int32 delivery_month = 8;
inline void InstrumentMessage::clear_delivery_month() {
  delivery_month_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_delivery_month() const {
  return delivery_month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::delivery_month() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.delivery_month)
  return _internal_delivery_month();
}
inline void InstrumentMessage::_internal_set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delivery_month_ = value;
}
inline void InstrumentMessage::set_delivery_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delivery_month(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.delivery_month)
}

// int32 max_market_order_volume = 9;
inline void InstrumentMessage::clear_max_market_order_volume() {
  max_market_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_max_market_order_volume() const {
  return max_market_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::max_market_order_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.max_market_order_volume)
  return _internal_max_market_order_volume();
}
inline void InstrumentMessage::_internal_set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_market_order_volume_ = value;
}
inline void InstrumentMessage::set_max_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_market_order_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.max_market_order_volume)
}

// int32 min_market_order_volume = 10;
inline void InstrumentMessage::clear_min_market_order_volume() {
  min_market_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_min_market_order_volume() const {
  return min_market_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::min_market_order_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.min_market_order_volume)
  return _internal_min_market_order_volume();
}
inline void InstrumentMessage::_internal_set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_market_order_volume_ = value;
}
inline void InstrumentMessage::set_min_market_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_market_order_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.min_market_order_volume)
}

// int32 max_limit_order_volume = 11;
inline void InstrumentMessage::clear_max_limit_order_volume() {
  max_limit_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_max_limit_order_volume() const {
  return max_limit_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::max_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.max_limit_order_volume)
  return _internal_max_limit_order_volume();
}
inline void InstrumentMessage::_internal_set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_limit_order_volume_ = value;
}
inline void InstrumentMessage::set_max_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_limit_order_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.max_limit_order_volume)
}

// int32 min_limit_order_volume = 12;
inline void InstrumentMessage::clear_min_limit_order_volume() {
  min_limit_order_volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_min_limit_order_volume() const {
  return min_limit_order_volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::min_limit_order_volume() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.min_limit_order_volume)
  return _internal_min_limit_order_volume();
}
inline void InstrumentMessage::_internal_set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_limit_order_volume_ = value;
}
inline void InstrumentMessage::set_min_limit_order_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_limit_order_volume(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.min_limit_order_volume)
}

// int32 volume_multiple = 13;
inline void InstrumentMessage::clear_volume_multiple() {
  volume_multiple_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_volume_multiple() const {
  return volume_multiple_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::volume_multiple() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.volume_multiple)
  return _internal_volume_multiple();
}
inline void InstrumentMessage::_internal_set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_multiple_ = value;
}
inline void InstrumentMessage::set_volume_multiple(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume_multiple(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.volume_multiple)
}

// double price_tick = 14;
inline void InstrumentMessage::clear_price_tick() {
  price_tick_ = 0;
}
inline double InstrumentMessage::_internal_price_tick() const {
  return price_tick_;
}
inline double InstrumentMessage::price_tick() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.price_tick)
  return _internal_price_tick();
}
inline void InstrumentMessage::_internal_set_price_tick(double value) {
  
  price_tick_ = value;
}
inline void InstrumentMessage::set_price_tick(double value) {
  _internal_set_price_tick(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.price_tick)
}

// string create_date = 15;
inline void InstrumentMessage::clear_create_date() {
  create_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::create_date() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.create_date)
  return _internal_create_date();
}
inline void InstrumentMessage::set_create_date(const std::string& value) {
  _internal_set_create_date(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.create_date)
}
inline std::string* InstrumentMessage::mutable_create_date() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.create_date)
  return _internal_mutable_create_date();
}
inline const std::string& InstrumentMessage::_internal_create_date() const {
  return create_date_.Get();
}
inline void InstrumentMessage::_internal_set_create_date(const std::string& value) {
  
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_create_date(std::string&& value) {
  
  create_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.create_date)
}
inline void InstrumentMessage::set_create_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.create_date)
}
inline void InstrumentMessage::set_create_date(const char* value,
    size_t size) {
  
  create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.create_date)
}
inline std::string* InstrumentMessage::_internal_mutable_create_date() {
  
  return create_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_create_date() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.create_date)
  return create_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_create_date(std::string* create_date) {
  if (create_date != nullptr) {
    
  } else {
    
  }
  create_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), create_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.create_date)
}
inline std::string* InstrumentMessage::unsafe_arena_release_create_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.create_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return create_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_create_date(
    std::string* create_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (create_date != nullptr) {
    
  } else {
    
  }
  create_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      create_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.create_date)
}

// string open_date = 16;
inline void InstrumentMessage::clear_open_date() {
  open_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::open_date() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.open_date)
  return _internal_open_date();
}
inline void InstrumentMessage::set_open_date(const std::string& value) {
  _internal_set_open_date(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.open_date)
}
inline std::string* InstrumentMessage::mutable_open_date() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.open_date)
  return _internal_mutable_open_date();
}
inline const std::string& InstrumentMessage::_internal_open_date() const {
  return open_date_.Get();
}
inline void InstrumentMessage::_internal_set_open_date(const std::string& value) {
  
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_open_date(std::string&& value) {
  
  open_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.open_date)
}
inline void InstrumentMessage::set_open_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.open_date)
}
inline void InstrumentMessage::set_open_date(const char* value,
    size_t size) {
  
  open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.open_date)
}
inline std::string* InstrumentMessage::_internal_mutable_open_date() {
  
  return open_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_open_date() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.open_date)
  return open_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_open_date(std::string* open_date) {
  if (open_date != nullptr) {
    
  } else {
    
  }
  open_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.open_date)
}
inline std::string* InstrumentMessage::unsafe_arena_release_open_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.open_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return open_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_open_date(
    std::string* open_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (open_date != nullptr) {
    
  } else {
    
  }
  open_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      open_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.open_date)
}

// string expire_date = 17;
inline void InstrumentMessage::clear_expire_date() {
  expire_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::expire_date() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.expire_date)
  return _internal_expire_date();
}
inline void InstrumentMessage::set_expire_date(const std::string& value) {
  _internal_set_expire_date(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.expire_date)
}
inline std::string* InstrumentMessage::mutable_expire_date() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.expire_date)
  return _internal_mutable_expire_date();
}
inline const std::string& InstrumentMessage::_internal_expire_date() const {
  return expire_date_.Get();
}
inline void InstrumentMessage::_internal_set_expire_date(const std::string& value) {
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_expire_date(std::string&& value) {
  
  expire_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.expire_date)
}
inline void InstrumentMessage::set_expire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.expire_date)
}
inline void InstrumentMessage::set_expire_date(const char* value,
    size_t size) {
  
  expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.expire_date)
}
inline std::string* InstrumentMessage::_internal_mutable_expire_date() {
  
  return expire_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_expire_date() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.expire_date)
  return expire_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_expire_date(std::string* expire_date) {
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expire_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.expire_date)
}
inline std::string* InstrumentMessage::unsafe_arena_release_expire_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.expire_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return expire_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_expire_date(
    std::string* expire_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (expire_date != nullptr) {
    
  } else {
    
  }
  expire_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      expire_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.expire_date)
}

// string start_deliv_date = 18;
inline void InstrumentMessage::clear_start_deliv_date() {
  start_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::start_deliv_date() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.start_deliv_date)
  return _internal_start_deliv_date();
}
inline void InstrumentMessage::set_start_deliv_date(const std::string& value) {
  _internal_set_start_deliv_date(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.start_deliv_date)
}
inline std::string* InstrumentMessage::mutable_start_deliv_date() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.start_deliv_date)
  return _internal_mutable_start_deliv_date();
}
inline const std::string& InstrumentMessage::_internal_start_deliv_date() const {
  return start_deliv_date_.Get();
}
inline void InstrumentMessage::_internal_set_start_deliv_date(const std::string& value) {
  
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_start_deliv_date(std::string&& value) {
  
  start_deliv_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.start_deliv_date)
}
inline void InstrumentMessage::set_start_deliv_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.start_deliv_date)
}
inline void InstrumentMessage::set_start_deliv_date(const char* value,
    size_t size) {
  
  start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.start_deliv_date)
}
inline std::string* InstrumentMessage::_internal_mutable_start_deliv_date() {
  
  return start_deliv_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_start_deliv_date() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.start_deliv_date)
  return start_deliv_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_start_deliv_date(std::string* start_deliv_date) {
  if (start_deliv_date != nullptr) {
    
  } else {
    
  }
  start_deliv_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_deliv_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.start_deliv_date)
}
inline std::string* InstrumentMessage::unsafe_arena_release_start_deliv_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.start_deliv_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return start_deliv_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_start_deliv_date(
    std::string* start_deliv_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_deliv_date != nullptr) {
    
  } else {
    
  }
  start_deliv_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_deliv_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.start_deliv_date)
}

// string end_deliv_date = 19;
inline void InstrumentMessage::clear_end_deliv_date() {
  end_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::end_deliv_date() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.end_deliv_date)
  return _internal_end_deliv_date();
}
inline void InstrumentMessage::set_end_deliv_date(const std::string& value) {
  _internal_set_end_deliv_date(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.end_deliv_date)
}
inline std::string* InstrumentMessage::mutable_end_deliv_date() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.end_deliv_date)
  return _internal_mutable_end_deliv_date();
}
inline const std::string& InstrumentMessage::_internal_end_deliv_date() const {
  return end_deliv_date_.Get();
}
inline void InstrumentMessage::_internal_set_end_deliv_date(const std::string& value) {
  
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_end_deliv_date(std::string&& value) {
  
  end_deliv_date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.end_deliv_date)
}
inline void InstrumentMessage::set_end_deliv_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.end_deliv_date)
}
inline void InstrumentMessage::set_end_deliv_date(const char* value,
    size_t size) {
  
  end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.end_deliv_date)
}
inline std::string* InstrumentMessage::_internal_mutable_end_deliv_date() {
  
  return end_deliv_date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_end_deliv_date() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.end_deliv_date)
  return end_deliv_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_end_deliv_date(std::string* end_deliv_date) {
  if (end_deliv_date != nullptr) {
    
  } else {
    
  }
  end_deliv_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_deliv_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.end_deliv_date)
}
inline std::string* InstrumentMessage::unsafe_arena_release_end_deliv_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.end_deliv_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return end_deliv_date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_end_deliv_date(
    std::string* end_deliv_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (end_deliv_date != nullptr) {
    
  } else {
    
  }
  end_deliv_date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      end_deliv_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.end_deliv_date)
}

// string inst_life_phase = 20;
inline void InstrumentMessage::clear_inst_life_phase() {
  inst_life_phase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::inst_life_phase() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.inst_life_phase)
  return _internal_inst_life_phase();
}
inline void InstrumentMessage::set_inst_life_phase(const std::string& value) {
  _internal_set_inst_life_phase(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.inst_life_phase)
}
inline std::string* InstrumentMessage::mutable_inst_life_phase() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.inst_life_phase)
  return _internal_mutable_inst_life_phase();
}
inline const std::string& InstrumentMessage::_internal_inst_life_phase() const {
  return inst_life_phase_.Get();
}
inline void InstrumentMessage::_internal_set_inst_life_phase(const std::string& value) {
  
  inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_inst_life_phase(std::string&& value) {
  
  inst_life_phase_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.inst_life_phase)
}
inline void InstrumentMessage::set_inst_life_phase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.inst_life_phase)
}
inline void InstrumentMessage::set_inst_life_phase(const char* value,
    size_t size) {
  
  inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.inst_life_phase)
}
inline std::string* InstrumentMessage::_internal_mutable_inst_life_phase() {
  
  return inst_life_phase_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_inst_life_phase() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.inst_life_phase)
  return inst_life_phase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_inst_life_phase(std::string* inst_life_phase) {
  if (inst_life_phase != nullptr) {
    
  } else {
    
  }
  inst_life_phase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inst_life_phase,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.inst_life_phase)
}
inline std::string* InstrumentMessage::unsafe_arena_release_inst_life_phase() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.inst_life_phase)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inst_life_phase_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_inst_life_phase(
    std::string* inst_life_phase) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inst_life_phase != nullptr) {
    
  } else {
    
  }
  inst_life_phase_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inst_life_phase, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.inst_life_phase)
}

// int32 is_trading = 21;
inline void InstrumentMessage::clear_is_trading() {
  is_trading_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::_internal_is_trading() const {
  return is_trading_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InstrumentMessage::is_trading() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.is_trading)
  return _internal_is_trading();
}
inline void InstrumentMessage::_internal_set_is_trading(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_trading_ = value;
}
inline void InstrumentMessage::set_is_trading(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_trading(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.is_trading)
}

// string position_type = 22;
inline void InstrumentMessage::clear_position_type() {
  position_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::position_type() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.position_type)
  return _internal_position_type();
}
inline void InstrumentMessage::set_position_type(const std::string& value) {
  _internal_set_position_type(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.position_type)
}
inline std::string* InstrumentMessage::mutable_position_type() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.position_type)
  return _internal_mutable_position_type();
}
inline const std::string& InstrumentMessage::_internal_position_type() const {
  return position_type_.Get();
}
inline void InstrumentMessage::_internal_set_position_type(const std::string& value) {
  
  position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_position_type(std::string&& value) {
  
  position_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.position_type)
}
inline void InstrumentMessage::set_position_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.position_type)
}
inline void InstrumentMessage::set_position_type(const char* value,
    size_t size) {
  
  position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.position_type)
}
inline std::string* InstrumentMessage::_internal_mutable_position_type() {
  
  return position_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_position_type() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.position_type)
  return position_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_position_type(std::string* position_type) {
  if (position_type != nullptr) {
    
  } else {
    
  }
  position_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.position_type)
}
inline std::string* InstrumentMessage::unsafe_arena_release_position_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.position_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return position_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_position_type(
    std::string* position_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (position_type != nullptr) {
    
  } else {
    
  }
  position_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      position_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.position_type)
}

// string position_date_type = 23;
inline void InstrumentMessage::clear_position_date_type() {
  position_date_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::position_date_type() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.position_date_type)
  return _internal_position_date_type();
}
inline void InstrumentMessage::set_position_date_type(const std::string& value) {
  _internal_set_position_date_type(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.position_date_type)
}
inline std::string* InstrumentMessage::mutable_position_date_type() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.position_date_type)
  return _internal_mutable_position_date_type();
}
inline const std::string& InstrumentMessage::_internal_position_date_type() const {
  return position_date_type_.Get();
}
inline void InstrumentMessage::_internal_set_position_date_type(const std::string& value) {
  
  position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_position_date_type(std::string&& value) {
  
  position_date_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.position_date_type)
}
inline void InstrumentMessage::set_position_date_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.position_date_type)
}
inline void InstrumentMessage::set_position_date_type(const char* value,
    size_t size) {
  
  position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.position_date_type)
}
inline std::string* InstrumentMessage::_internal_mutable_position_date_type() {
  
  return position_date_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_position_date_type() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.position_date_type)
  return position_date_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_position_date_type(std::string* position_date_type) {
  if (position_date_type != nullptr) {
    
  } else {
    
  }
  position_date_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), position_date_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.position_date_type)
}
inline std::string* InstrumentMessage::unsafe_arena_release_position_date_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.position_date_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return position_date_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_position_date_type(
    std::string* position_date_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (position_date_type != nullptr) {
    
  } else {
    
  }
  position_date_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      position_date_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.position_date_type)
}

// double long_margin_ratio = 24;
inline void InstrumentMessage::clear_long_margin_ratio() {
  long_margin_ratio_ = 0;
}
inline double InstrumentMessage::_internal_long_margin_ratio() const {
  return long_margin_ratio_;
}
inline double InstrumentMessage::long_margin_ratio() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.long_margin_ratio)
  return _internal_long_margin_ratio();
}
inline void InstrumentMessage::_internal_set_long_margin_ratio(double value) {
  
  long_margin_ratio_ = value;
}
inline void InstrumentMessage::set_long_margin_ratio(double value) {
  _internal_set_long_margin_ratio(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.long_margin_ratio)
}

// double short_margin_ratio = 25;
inline void InstrumentMessage::clear_short_margin_ratio() {
  short_margin_ratio_ = 0;
}
inline double InstrumentMessage::_internal_short_margin_ratio() const {
  return short_margin_ratio_;
}
inline double InstrumentMessage::short_margin_ratio() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.short_margin_ratio)
  return _internal_short_margin_ratio();
}
inline void InstrumentMessage::_internal_set_short_margin_ratio(double value) {
  
  short_margin_ratio_ = value;
}
inline void InstrumentMessage::set_short_margin_ratio(double value) {
  _internal_set_short_margin_ratio(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.short_margin_ratio)
}

// string max_margin_side_algorithm = 26;
inline void InstrumentMessage::clear_max_margin_side_algorithm() {
  max_margin_side_algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::max_margin_side_algorithm() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.max_margin_side_algorithm)
  return _internal_max_margin_side_algorithm();
}
inline void InstrumentMessage::set_max_margin_side_algorithm(const std::string& value) {
  _internal_set_max_margin_side_algorithm(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.max_margin_side_algorithm)
}
inline std::string* InstrumentMessage::mutable_max_margin_side_algorithm() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.max_margin_side_algorithm)
  return _internal_mutable_max_margin_side_algorithm();
}
inline const std::string& InstrumentMessage::_internal_max_margin_side_algorithm() const {
  return max_margin_side_algorithm_.Get();
}
inline void InstrumentMessage::_internal_set_max_margin_side_algorithm(const std::string& value) {
  
  max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_max_margin_side_algorithm(std::string&& value) {
  
  max_margin_side_algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.max_margin_side_algorithm)
}
inline void InstrumentMessage::set_max_margin_side_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.max_margin_side_algorithm)
}
inline void InstrumentMessage::set_max_margin_side_algorithm(const char* value,
    size_t size) {
  
  max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.max_margin_side_algorithm)
}
inline std::string* InstrumentMessage::_internal_mutable_max_margin_side_algorithm() {
  
  return max_margin_side_algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_max_margin_side_algorithm() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.max_margin_side_algorithm)
  return max_margin_side_algorithm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_max_margin_side_algorithm(std::string* max_margin_side_algorithm) {
  if (max_margin_side_algorithm != nullptr) {
    
  } else {
    
  }
  max_margin_side_algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max_margin_side_algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.max_margin_side_algorithm)
}
inline std::string* InstrumentMessage::unsafe_arena_release_max_margin_side_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.max_margin_side_algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return max_margin_side_algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_max_margin_side_algorithm(
    std::string* max_margin_side_algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (max_margin_side_algorithm != nullptr) {
    
  } else {
    
  }
  max_margin_side_algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      max_margin_side_algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.max_margin_side_algorithm)
}

// string underlying_instr_id = 27;
inline void InstrumentMessage::clear_underlying_instr_id() {
  underlying_instr_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::underlying_instr_id() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.underlying_instr_id)
  return _internal_underlying_instr_id();
}
inline void InstrumentMessage::set_underlying_instr_id(const std::string& value) {
  _internal_set_underlying_instr_id(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.underlying_instr_id)
}
inline std::string* InstrumentMessage::mutable_underlying_instr_id() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.underlying_instr_id)
  return _internal_mutable_underlying_instr_id();
}
inline const std::string& InstrumentMessage::_internal_underlying_instr_id() const {
  return underlying_instr_id_.Get();
}
inline void InstrumentMessage::_internal_set_underlying_instr_id(const std::string& value) {
  
  underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_underlying_instr_id(std::string&& value) {
  
  underlying_instr_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.underlying_instr_id)
}
inline void InstrumentMessage::set_underlying_instr_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.underlying_instr_id)
}
inline void InstrumentMessage::set_underlying_instr_id(const char* value,
    size_t size) {
  
  underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.underlying_instr_id)
}
inline std::string* InstrumentMessage::_internal_mutable_underlying_instr_id() {
  
  return underlying_instr_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_underlying_instr_id() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.underlying_instr_id)
  return underlying_instr_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_underlying_instr_id(std::string* underlying_instr_id) {
  if (underlying_instr_id != nullptr) {
    
  } else {
    
  }
  underlying_instr_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), underlying_instr_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.underlying_instr_id)
}
inline std::string* InstrumentMessage::unsafe_arena_release_underlying_instr_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.underlying_instr_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return underlying_instr_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_underlying_instr_id(
    std::string* underlying_instr_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (underlying_instr_id != nullptr) {
    
  } else {
    
  }
  underlying_instr_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      underlying_instr_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.underlying_instr_id)
}

// double strike_price = 28;
inline void InstrumentMessage::clear_strike_price() {
  strike_price_ = 0;
}
inline double InstrumentMessage::_internal_strike_price() const {
  return strike_price_;
}
inline double InstrumentMessage::strike_price() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.strike_price)
  return _internal_strike_price();
}
inline void InstrumentMessage::_internal_set_strike_price(double value) {
  
  strike_price_ = value;
}
inline void InstrumentMessage::set_strike_price(double value) {
  _internal_set_strike_price(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.strike_price)
}

// string options_type = 29;
inline void InstrumentMessage::clear_options_type() {
  options_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::options_type() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.options_type)
  return _internal_options_type();
}
inline void InstrumentMessage::set_options_type(const std::string& value) {
  _internal_set_options_type(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.options_type)
}
inline std::string* InstrumentMessage::mutable_options_type() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.options_type)
  return _internal_mutable_options_type();
}
inline const std::string& InstrumentMessage::_internal_options_type() const {
  return options_type_.Get();
}
inline void InstrumentMessage::_internal_set_options_type(const std::string& value) {
  
  options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_options_type(std::string&& value) {
  
  options_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.options_type)
}
inline void InstrumentMessage::set_options_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.options_type)
}
inline void InstrumentMessage::set_options_type(const char* value,
    size_t size) {
  
  options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.options_type)
}
inline std::string* InstrumentMessage::_internal_mutable_options_type() {
  
  return options_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_options_type() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.options_type)
  return options_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_options_type(std::string* options_type) {
  if (options_type != nullptr) {
    
  } else {
    
  }
  options_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), options_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.options_type)
}
inline std::string* InstrumentMessage::unsafe_arena_release_options_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.options_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return options_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_options_type(
    std::string* options_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (options_type != nullptr) {
    
  } else {
    
  }
  options_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      options_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.options_type)
}

// double underlying_multiple = 30;
inline void InstrumentMessage::clear_underlying_multiple() {
  underlying_multiple_ = 0;
}
inline double InstrumentMessage::_internal_underlying_multiple() const {
  return underlying_multiple_;
}
inline double InstrumentMessage::underlying_multiple() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.underlying_multiple)
  return _internal_underlying_multiple();
}
inline void InstrumentMessage::_internal_set_underlying_multiple(double value) {
  
  underlying_multiple_ = value;
}
inline void InstrumentMessage::set_underlying_multiple(double value) {
  _internal_set_underlying_multiple(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.underlying_multiple)
}

// string combination_type = 31;
inline void InstrumentMessage::clear_combination_type() {
  combination_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentMessage::combination_type() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentMessage.combination_type)
  return _internal_combination_type();
}
inline void InstrumentMessage::set_combination_type(const std::string& value) {
  _internal_set_combination_type(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentMessage.combination_type)
}
inline std::string* InstrumentMessage::mutable_combination_type() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentMessage.combination_type)
  return _internal_mutable_combination_type();
}
inline const std::string& InstrumentMessage::_internal_combination_type() const {
  return combination_type_.Get();
}
inline void InstrumentMessage::_internal_set_combination_type(const std::string& value) {
  
  combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentMessage::set_combination_type(std::string&& value) {
  
  combination_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentMessage.combination_type)
}
inline void InstrumentMessage::set_combination_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentMessage.combination_type)
}
inline void InstrumentMessage::set_combination_type(const char* value,
    size_t size) {
  
  combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentMessage.combination_type)
}
inline std::string* InstrumentMessage::_internal_mutable_combination_type() {
  
  return combination_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentMessage::release_combination_type() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentMessage.combination_type)
  return combination_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentMessage::set_allocated_combination_type(std::string* combination_type) {
  if (combination_type != nullptr) {
    
  } else {
    
  }
  combination_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combination_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentMessage.combination_type)
}
inline std::string* InstrumentMessage::unsafe_arena_release_combination_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentMessage.combination_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return combination_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentMessage::unsafe_arena_set_allocated_combination_type(
    std::string* combination_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (combination_type != nullptr) {
    
  } else {
    
  }
  combination_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      combination_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentMessage.combination_type)
}

// -------------------------------------------------------------------

// InstrumentBatchMessage

// repeated .ctp.InstrumentMessage instruments = 1;
inline int InstrumentBatchMessage::_internal_instruments_size() const {
  return instruments_.size();
}
inline int InstrumentBatchMessage::instruments_size() const {
  return _internal_instruments_size();
}
inline void InstrumentBatchMessage::clear_instruments() {
  instruments_.Clear();
}
inline ::ctp::InstrumentMessage* InstrumentBatchMessage::mutable_instruments(int index) {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentBatchMessage.instruments)
  return instruments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InstrumentMessage >*
InstrumentBatchMessage::mutable_instruments() {
  // @@protoc_insertion_point(field_mutable_list:ctp.InstrumentBatchMessage.instruments)
  return &instruments_;
}
inline const ::ctp::InstrumentMessage& InstrumentBatchMessage::_internal_instruments(int index) const {
  return instruments_.Get(index);
}
inline const ::ctp::InstrumentMessage& InstrumentBatchMessage::instruments(int index) const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentBatchMessage.instruments)
  return _internal_instruments(index);
}
inline ::ctp::InstrumentMessage* InstrumentBatchMessage::_internal_add_instruments() {
  return instruments_.Add();
}
inline ::ctp::InstrumentMessage* InstrumentBatchMessage::add_instruments() {
  // @@protoc_insertion_point(field_add:ctp.InstrumentBatchMessage.instruments)
  return _internal_add_instruments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::InstrumentMessage >&
InstrumentBatchMessage::instruments() const {
  // @@protoc_insertion_point(field_list:ctp.InstrumentBatchMessage.instruments)
  return instruments_;
}

// int64 timestamp = 2;
inline void InstrumentBatchMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstrumentBatchMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InstrumentBatchMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentBatchMessage.timestamp)
  return _internal_timestamp();
}
inline void InstrumentBatchMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void InstrumentBatchMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentBatchMessage.timestamp)
}

// string message_type = 3;
inline void InstrumentBatchMessage::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InstrumentBatchMessage::message_type() const {
  // @@protoc_insertion_point(field_get:ctp.InstrumentBatchMessage.message_type)
  return _internal_message_type();
}
inline void InstrumentBatchMessage::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:ctp.InstrumentBatchMessage.message_type)
}
inline std::string* InstrumentBatchMessage::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:ctp.InstrumentBatchMessage.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& InstrumentBatchMessage::_internal_message_type() const {
  return message_type_.Get();
}
inline void InstrumentBatchMessage::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InstrumentBatchMessage::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.InstrumentBatchMessage.message_type)
}
inline void InstrumentBatchMessage::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.InstrumentBatchMessage.message_type)
}
inline void InstrumentBatchMessage::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.InstrumentBatchMessage.message_type)
}
inline std::string* InstrumentBatchMessage::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InstrumentBatchMessage::release_message_type() {
  // @@protoc_insertion_point(field_release:ctp.InstrumentBatchMessage.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InstrumentBatchMessage::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.InstrumentBatchMessage.message_type)
}
inline std::string* InstrumentBatchMessage::unsafe_arena_release_message_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.InstrumentBatchMessage.message_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InstrumentBatchMessage::unsafe_arena_set_allocated_message_type(
    std::string* message_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.InstrumentBatchMessage.message_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ctp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_instrument_2eproto
