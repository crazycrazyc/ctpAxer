// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instrument.proto

#include "instrument.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_instrument_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentMessage_instrument_2eproto;
namespace ctp {
class InstrumentMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentMessage> _instance;
} _InstrumentMessage_default_instance_;
class InstrumentBatchMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InstrumentBatchMessage> _instance;
} _InstrumentBatchMessage_default_instance_;
}  // namespace ctp
static void InitDefaultsscc_info_InstrumentBatchMessage_instrument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_InstrumentBatchMessage_default_instance_;
    new (ptr) ::ctp::InstrumentBatchMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::InstrumentBatchMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InstrumentBatchMessage_instrument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InstrumentBatchMessage_instrument_2eproto}, {
      &scc_info_InstrumentMessage_instrument_2eproto.base,}};

static void InitDefaultsscc_info_InstrumentMessage_instrument_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ctp::_InstrumentMessage_default_instance_;
    new (ptr) ::ctp::InstrumentMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ctp::InstrumentMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InstrumentMessage_instrument_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InstrumentMessage_instrument_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_instrument_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_instrument_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_instrument_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_instrument_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, instrument_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, instrument_name_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, exchange_inst_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, product_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, product_class_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, delivery_year_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, delivery_month_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, max_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, min_market_order_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, max_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, min_limit_order_volume_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, volume_multiple_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, price_tick_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, create_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, open_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, expire_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, start_deliv_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, end_deliv_date_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, inst_life_phase_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, is_trading_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, position_type_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, position_date_type_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, long_margin_ratio_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, short_margin_ratio_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, max_margin_side_algorithm_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, underlying_instr_id_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, strike_price_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, options_type_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, underlying_multiple_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentMessage, combination_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentBatchMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentBatchMessage, instruments_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentBatchMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::ctp::InstrumentBatchMessage, message_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ctp::InstrumentMessage)},
  { 36, -1, sizeof(::ctp::InstrumentBatchMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctp::_InstrumentMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ctp::_InstrumentBatchMessage_default_instance_),
};

const char descriptor_table_protodef_instrument_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020instrument.proto\022\003ctp\"\244\006\n\021InstrumentMe"
  "ssage\022\025\n\rinstrument_id\030\001 \001(\t\022\023\n\013exchange"
  "_id\030\002 \001(\t\022\027\n\017instrument_name\030\003 \001(\t\022\030\n\020ex"
  "change_inst_id\030\004 \001(\t\022\022\n\nproduct_id\030\005 \001(\t"
  "\022\025\n\rproduct_class\030\006 \001(\t\022\025\n\rdelivery_year"
  "\030\007 \001(\005\022\026\n\016delivery_month\030\010 \001(\005\022\037\n\027max_ma"
  "rket_order_volume\030\t \001(\005\022\037\n\027min_market_or"
  "der_volume\030\n \001(\005\022\036\n\026max_limit_order_volu"
  "me\030\013 \001(\005\022\036\n\026min_limit_order_volume\030\014 \001(\005"
  "\022\027\n\017volume_multiple\030\r \001(\005\022\022\n\nprice_tick\030"
  "\016 \001(\001\022\023\n\013create_date\030\017 \001(\t\022\021\n\topen_date\030"
  "\020 \001(\t\022\023\n\013expire_date\030\021 \001(\t\022\030\n\020start_deli"
  "v_date\030\022 \001(\t\022\026\n\016end_deliv_date\030\023 \001(\t\022\027\n\017"
  "inst_life_phase\030\024 \001(\t\022\022\n\nis_trading\030\025 \001("
  "\005\022\025\n\rposition_type\030\026 \001(\t\022\032\n\022position_dat"
  "e_type\030\027 \001(\t\022\031\n\021long_margin_ratio\030\030 \001(\001\022"
  "\032\n\022short_margin_ratio\030\031 \001(\001\022!\n\031max_margi"
  "n_side_algorithm\030\032 \001(\t\022\033\n\023underlying_ins"
  "tr_id\030\033 \001(\t\022\024\n\014strike_price\030\034 \001(\001\022\024\n\014opt"
  "ions_type\030\035 \001(\t\022\033\n\023underlying_multiple\030\036"
  " \001(\001\022\030\n\020combination_type\030\037 \001(\t\"n\n\026Instru"
  "mentBatchMessage\022+\n\013instruments\030\001 \003(\0132\026."
  "ctp.InstrumentMessage\022\021\n\ttimestamp\030\002 \001(\003"
  "\022\024\n\014message_type\030\003 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_instrument_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_instrument_2eproto_sccs[2] = {
  &scc_info_InstrumentBatchMessage_instrument_2eproto.base,
  &scc_info_InstrumentMessage_instrument_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_instrument_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instrument_2eproto = {
  false, false, descriptor_table_protodef_instrument_2eproto, "instrument.proto", 950,
  &descriptor_table_instrument_2eproto_once, descriptor_table_instrument_2eproto_sccs, descriptor_table_instrument_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_instrument_2eproto::offsets,
  file_level_metadata_instrument_2eproto, 2, file_level_enum_descriptors_instrument_2eproto, file_level_service_descriptors_instrument_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_instrument_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_instrument_2eproto)), true);
namespace ctp {

// ===================================================================

void InstrumentMessage::InitAsDefaultInstance() {
}
class InstrumentMessage::_Internal {
 public:
};

InstrumentMessage::InstrumentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctp.InstrumentMessage)
}
InstrumentMessage::InstrumentMessage(const InstrumentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_id().empty()) {
    instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_id(),
      GetArena());
  }
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_id().empty()) {
    exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_id(),
      GetArena());
  }
  instrument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instrument_name().empty()) {
    instrument_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_instrument_name(),
      GetArena());
  }
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exchange_inst_id().empty()) {
    exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exchange_inst_id(),
      GetArena());
  }
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_id().empty()) {
    product_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_id(),
      GetArena());
  }
  product_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_product_class().empty()) {
    product_class_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_product_class(),
      GetArena());
  }
  create_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_create_date().empty()) {
    create_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_create_date(),
      GetArena());
  }
  open_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_open_date().empty()) {
    open_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_open_date(),
      GetArena());
  }
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_expire_date().empty()) {
    expire_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_expire_date(),
      GetArena());
  }
  start_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_start_deliv_date().empty()) {
    start_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_start_deliv_date(),
      GetArena());
  }
  end_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_end_deliv_date().empty()) {
    end_deliv_date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_end_deliv_date(),
      GetArena());
  }
  inst_life_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inst_life_phase().empty()) {
    inst_life_phase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inst_life_phase(),
      GetArena());
  }
  position_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_position_type().empty()) {
    position_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_position_type(),
      GetArena());
  }
  position_date_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_position_date_type().empty()) {
    position_date_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_position_date_type(),
      GetArena());
  }
  max_margin_side_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_margin_side_algorithm().empty()) {
    max_margin_side_algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_max_margin_side_algorithm(),
      GetArena());
  }
  underlying_instr_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_underlying_instr_id().empty()) {
    underlying_instr_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_underlying_instr_id(),
      GetArena());
  }
  options_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_options_type().empty()) {
    options_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_options_type(),
      GetArena());
  }
  combination_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_combination_type().empty()) {
    combination_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_combination_type(),
      GetArena());
  }
  ::memcpy(&delivery_year_, &from.delivery_year_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlying_multiple_) -
    reinterpret_cast<char*>(&delivery_year_)) + sizeof(underlying_multiple_));
  // @@protoc_insertion_point(copy_constructor:ctp.InstrumentMessage)
}

void InstrumentMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentMessage_instrument_2eproto.base);
  instrument_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_deliv_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inst_life_phase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_date_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_margin_side_algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_instr_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combination_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&delivery_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlying_multiple_) -
      reinterpret_cast<char*>(&delivery_year_)) + sizeof(underlying_multiple_));
}

InstrumentMessage::~InstrumentMessage() {
  // @@protoc_insertion_point(destructor:ctp.InstrumentMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  instrument_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instrument_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exchange_inst_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  create_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  open_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_deliv_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_deliv_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inst_life_phase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  position_date_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_margin_side_algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  underlying_instr_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  combination_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentMessage::ArenaDtor(void* object) {
  InstrumentMessage* _this = reinterpret_cast< InstrumentMessage* >(object);
  (void)_this;
}
void InstrumentMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentMessage& InstrumentMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentMessage_instrument_2eproto.base);
  return *internal_default_instance();
}


void InstrumentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.InstrumentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_inst_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_class_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  open_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_deliv_date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inst_life_phase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_date_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_margin_side_algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  underlying_instr_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  options_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  combination_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&delivery_year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlying_multiple_) -
      reinterpret_cast<char*>(&delivery_year_)) + sizeof(underlying_multiple_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string instrument_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_instrument_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.instrument_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.exchange_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string instrument_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_instrument_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.instrument_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exchange_inst_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exchange_inst_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.exchange_inst_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_product_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.product_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string product_class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_product_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.product_class"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delivery_year = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          delivery_year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delivery_month = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          delivery_month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_market_order_volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_market_order_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_market_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_limit_order_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          max_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_limit_order_volume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          min_limit_order_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 volume_multiple = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          volume_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double price_tick = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          price_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string create_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_create_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.create_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string open_date = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_open_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.open_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string expire_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_expire_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.expire_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string start_deliv_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_start_deliv_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.start_deliv_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string end_deliv_date = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_end_deliv_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.end_deliv_date"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inst_life_phase = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_inst_life_phase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.inst_life_phase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_trading = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          is_trading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string position_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_position_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.position_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string position_date_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_position_date_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.position_date_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double long_margin_ratio = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          long_margin_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double short_margin_ratio = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          short_margin_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string max_margin_side_algorithm = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_max_margin_side_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.max_margin_side_algorithm"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string underlying_instr_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_underlying_instr_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.underlying_instr_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double strike_price = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          strike_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string options_type = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_options_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.options_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double underlying_multiple = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          underlying_multiple_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string combination_type = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_combination_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentMessage.combination_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctp.InstrumentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_id().data(), static_cast<int>(this->_internal_instrument_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.instrument_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instrument_id(), target);
  }

  // string exchange_id = 2;
  if (this->exchange_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_id().data(), static_cast<int>(this->_internal_exchange_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.exchange_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exchange_id(), target);
  }

  // string instrument_name = 3;
  if (this->instrument_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instrument_name().data(), static_cast<int>(this->_internal_instrument_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.instrument_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instrument_name(), target);
  }

  // string exchange_inst_id = 4;
  if (this->exchange_inst_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exchange_inst_id().data(), static_cast<int>(this->_internal_exchange_inst_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.exchange_inst_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exchange_inst_id(), target);
  }

  // string product_id = 5;
  if (this->product_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_id().data(), static_cast<int>(this->_internal_product_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.product_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_product_id(), target);
  }

  // string product_class = 6;
  if (this->product_class().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_product_class().data(), static_cast<int>(this->_internal_product_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.product_class");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_product_class(), target);
  }

  // int32 delivery_year = 7;
  if (this->delivery_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_delivery_year(), target);
  }

  // int32 delivery_month = 8;
  if (this->delivery_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_delivery_month(), target);
  }

  // int32 max_market_order_volume = 9;
  if (this->max_market_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_market_order_volume(), target);
  }

  // int32 min_market_order_volume = 10;
  if (this->min_market_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_min_market_order_volume(), target);
  }

  // int32 max_limit_order_volume = 11;
  if (this->max_limit_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_max_limit_order_volume(), target);
  }

  // int32 min_limit_order_volume = 12;
  if (this->min_limit_order_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_min_limit_order_volume(), target);
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_volume_multiple(), target);
  }

  // double price_tick = 14;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_price_tick(), target);
  }

  // string create_date = 15;
  if (this->create_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_create_date().data(), static_cast<int>(this->_internal_create_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.create_date");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_create_date(), target);
  }

  // string open_date = 16;
  if (this->open_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_open_date().data(), static_cast<int>(this->_internal_open_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.open_date");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_open_date(), target);
  }

  // string expire_date = 17;
  if (this->expire_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expire_date().data(), static_cast<int>(this->_internal_expire_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.expire_date");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_expire_date(), target);
  }

  // string start_deliv_date = 18;
  if (this->start_deliv_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_deliv_date().data(), static_cast<int>(this->_internal_start_deliv_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.start_deliv_date");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_start_deliv_date(), target);
  }

  // string end_deliv_date = 19;
  if (this->end_deliv_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_deliv_date().data(), static_cast<int>(this->_internal_end_deliv_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.end_deliv_date");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_end_deliv_date(), target);
  }

  // string inst_life_phase = 20;
  if (this->inst_life_phase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inst_life_phase().data(), static_cast<int>(this->_internal_inst_life_phase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.inst_life_phase");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_inst_life_phase(), target);
  }

  // int32 is_trading = 21;
  if (this->is_trading() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_is_trading(), target);
  }

  // string position_type = 22;
  if (this->position_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_type().data(), static_cast<int>(this->_internal_position_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.position_type");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_position_type(), target);
  }

  // string position_date_type = 23;
  if (this->position_date_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_date_type().data(), static_cast<int>(this->_internal_position_date_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.position_date_type");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_position_date_type(), target);
  }

  // double long_margin_ratio = 24;
  if (!(this->long_margin_ratio() <= 0 && this->long_margin_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_long_margin_ratio(), target);
  }

  // double short_margin_ratio = 25;
  if (!(this->short_margin_ratio() <= 0 && this->short_margin_ratio() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_short_margin_ratio(), target);
  }

  // string max_margin_side_algorithm = 26;
  if (this->max_margin_side_algorithm().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_margin_side_algorithm().data(), static_cast<int>(this->_internal_max_margin_side_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.max_margin_side_algorithm");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_max_margin_side_algorithm(), target);
  }

  // string underlying_instr_id = 27;
  if (this->underlying_instr_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_underlying_instr_id().data(), static_cast<int>(this->_internal_underlying_instr_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.underlying_instr_id");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_underlying_instr_id(), target);
  }

  // double strike_price = 28;
  if (!(this->strike_price() <= 0 && this->strike_price() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_strike_price(), target);
  }

  // string options_type = 29;
  if (this->options_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_options_type().data(), static_cast<int>(this->_internal_options_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.options_type");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_options_type(), target);
  }

  // double underlying_multiple = 30;
  if (!(this->underlying_multiple() <= 0 && this->underlying_multiple() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_underlying_multiple(), target);
  }

  // string combination_type = 31;
  if (this->combination_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_combination_type().data(), static_cast<int>(this->_internal_combination_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentMessage.combination_type");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_combination_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.InstrumentMessage)
  return target;
}

size_t InstrumentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.InstrumentMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instrument_id = 1;
  if (this->instrument_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_id());
  }

  // string exchange_id = 2;
  if (this->exchange_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_id());
  }

  // string instrument_name = 3;
  if (this->instrument_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instrument_name());
  }

  // string exchange_inst_id = 4;
  if (this->exchange_inst_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exchange_inst_id());
  }

  // string product_id = 5;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_id());
  }

  // string product_class = 6;
  if (this->product_class().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_product_class());
  }

  // string create_date = 15;
  if (this->create_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_create_date());
  }

  // string open_date = 16;
  if (this->open_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_open_date());
  }

  // string expire_date = 17;
  if (this->expire_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expire_date());
  }

  // string start_deliv_date = 18;
  if (this->start_deliv_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_deliv_date());
  }

  // string end_deliv_date = 19;
  if (this->end_deliv_date().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_deliv_date());
  }

  // string inst_life_phase = 20;
  if (this->inst_life_phase().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inst_life_phase());
  }

  // string position_type = 22;
  if (this->position_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_type());
  }

  // string position_date_type = 23;
  if (this->position_date_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_date_type());
  }

  // string max_margin_side_algorithm = 26;
  if (this->max_margin_side_algorithm().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_margin_side_algorithm());
  }

  // string underlying_instr_id = 27;
  if (this->underlying_instr_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_underlying_instr_id());
  }

  // string options_type = 29;
  if (this->options_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_options_type());
  }

  // string combination_type = 31;
  if (this->combination_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_combination_type());
  }

  // int32 delivery_year = 7;
  if (this->delivery_year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delivery_year());
  }

  // int32 delivery_month = 8;
  if (this->delivery_month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delivery_month());
  }

  // int32 max_market_order_volume = 9;
  if (this->max_market_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_market_order_volume());
  }

  // int32 min_market_order_volume = 10;
  if (this->min_market_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_market_order_volume());
  }

  // int32 max_limit_order_volume = 11;
  if (this->max_limit_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_limit_order_volume());
  }

  // int32 min_limit_order_volume = 12;
  if (this->min_limit_order_volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_limit_order_volume());
  }

  // double price_tick = 14;
  if (!(this->price_tick() <= 0 && this->price_tick() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 volume_multiple = 13;
  if (this->volume_multiple() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_volume_multiple());
  }

  // int32 is_trading = 21;
  if (this->is_trading() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_trading());
  }

  // double long_margin_ratio = 24;
  if (!(this->long_margin_ratio() <= 0 && this->long_margin_ratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double short_margin_ratio = 25;
  if (!(this->short_margin_ratio() <= 0 && this->short_margin_ratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double strike_price = 28;
  if (!(this->strike_price() <= 0 && this->strike_price() >= 0)) {
    total_size += 2 + 8;
  }

  // double underlying_multiple = 30;
  if (!(this->underlying_multiple() <= 0 && this->underlying_multiple() >= 0)) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.InstrumentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.InstrumentMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.InstrumentMessage)
    MergeFrom(*source);
  }
}

void InstrumentMessage::MergeFrom(const InstrumentMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.InstrumentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.instrument_id().size() > 0) {
    _internal_set_instrument_id(from._internal_instrument_id());
  }
  if (from.exchange_id().size() > 0) {
    _internal_set_exchange_id(from._internal_exchange_id());
  }
  if (from.instrument_name().size() > 0) {
    _internal_set_instrument_name(from._internal_instrument_name());
  }
  if (from.exchange_inst_id().size() > 0) {
    _internal_set_exchange_inst_id(from._internal_exchange_inst_id());
  }
  if (from.product_id().size() > 0) {
    _internal_set_product_id(from._internal_product_id());
  }
  if (from.product_class().size() > 0) {
    _internal_set_product_class(from._internal_product_class());
  }
  if (from.create_date().size() > 0) {
    _internal_set_create_date(from._internal_create_date());
  }
  if (from.open_date().size() > 0) {
    _internal_set_open_date(from._internal_open_date());
  }
  if (from.expire_date().size() > 0) {
    _internal_set_expire_date(from._internal_expire_date());
  }
  if (from.start_deliv_date().size() > 0) {
    _internal_set_start_deliv_date(from._internal_start_deliv_date());
  }
  if (from.end_deliv_date().size() > 0) {
    _internal_set_end_deliv_date(from._internal_end_deliv_date());
  }
  if (from.inst_life_phase().size() > 0) {
    _internal_set_inst_life_phase(from._internal_inst_life_phase());
  }
  if (from.position_type().size() > 0) {
    _internal_set_position_type(from._internal_position_type());
  }
  if (from.position_date_type().size() > 0) {
    _internal_set_position_date_type(from._internal_position_date_type());
  }
  if (from.max_margin_side_algorithm().size() > 0) {
    _internal_set_max_margin_side_algorithm(from._internal_max_margin_side_algorithm());
  }
  if (from.underlying_instr_id().size() > 0) {
    _internal_set_underlying_instr_id(from._internal_underlying_instr_id());
  }
  if (from.options_type().size() > 0) {
    _internal_set_options_type(from._internal_options_type());
  }
  if (from.combination_type().size() > 0) {
    _internal_set_combination_type(from._internal_combination_type());
  }
  if (from.delivery_year() != 0) {
    _internal_set_delivery_year(from._internal_delivery_year());
  }
  if (from.delivery_month() != 0) {
    _internal_set_delivery_month(from._internal_delivery_month());
  }
  if (from.max_market_order_volume() != 0) {
    _internal_set_max_market_order_volume(from._internal_max_market_order_volume());
  }
  if (from.min_market_order_volume() != 0) {
    _internal_set_min_market_order_volume(from._internal_min_market_order_volume());
  }
  if (from.max_limit_order_volume() != 0) {
    _internal_set_max_limit_order_volume(from._internal_max_limit_order_volume());
  }
  if (from.min_limit_order_volume() != 0) {
    _internal_set_min_limit_order_volume(from._internal_min_limit_order_volume());
  }
  if (!(from.price_tick() <= 0 && from.price_tick() >= 0)) {
    _internal_set_price_tick(from._internal_price_tick());
  }
  if (from.volume_multiple() != 0) {
    _internal_set_volume_multiple(from._internal_volume_multiple());
  }
  if (from.is_trading() != 0) {
    _internal_set_is_trading(from._internal_is_trading());
  }
  if (!(from.long_margin_ratio() <= 0 && from.long_margin_ratio() >= 0)) {
    _internal_set_long_margin_ratio(from._internal_long_margin_ratio());
  }
  if (!(from.short_margin_ratio() <= 0 && from.short_margin_ratio() >= 0)) {
    _internal_set_short_margin_ratio(from._internal_short_margin_ratio());
  }
  if (!(from.strike_price() <= 0 && from.strike_price() >= 0)) {
    _internal_set_strike_price(from._internal_strike_price());
  }
  if (!(from.underlying_multiple() <= 0 && from.underlying_multiple() >= 0)) {
    _internal_set_underlying_multiple(from._internal_underlying_multiple());
  }
}

void InstrumentMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.InstrumentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentMessage::CopyFrom(const InstrumentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.InstrumentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentMessage::IsInitialized() const {
  return true;
}

void InstrumentMessage::InternalSwap(InstrumentMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instrument_id_.Swap(&other->instrument_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_id_.Swap(&other->exchange_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  instrument_name_.Swap(&other->instrument_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exchange_inst_id_.Swap(&other->exchange_inst_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_id_.Swap(&other->product_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  product_class_.Swap(&other->product_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  create_date_.Swap(&other->create_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  open_date_.Swap(&other->open_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  expire_date_.Swap(&other->expire_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  start_deliv_date_.Swap(&other->start_deliv_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  end_deliv_date_.Swap(&other->end_deliv_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inst_life_phase_.Swap(&other->inst_life_phase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_type_.Swap(&other->position_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  position_date_type_.Swap(&other->position_date_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_margin_side_algorithm_.Swap(&other->max_margin_side_algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  underlying_instr_id_.Swap(&other->underlying_instr_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  options_type_.Swap(&other->options_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  combination_type_.Swap(&other->combination_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentMessage, underlying_multiple_)
      + sizeof(InstrumentMessage::underlying_multiple_)
      - PROTOBUF_FIELD_OFFSET(InstrumentMessage, delivery_year_)>(
          reinterpret_cast<char*>(&delivery_year_),
          reinterpret_cast<char*>(&other->delivery_year_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InstrumentBatchMessage::InitAsDefaultInstance() {
}
class InstrumentBatchMessage::_Internal {
 public:
};

InstrumentBatchMessage::InstrumentBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  instruments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ctp.InstrumentBatchMessage)
}
InstrumentBatchMessage::InstrumentBatchMessage(const InstrumentBatchMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instruments_(from.instruments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_type().empty()) {
    message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_type(),
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ctp.InstrumentBatchMessage)
}

void InstrumentBatchMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InstrumentBatchMessage_instrument_2eproto.base);
  message_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_LONGLONG(0);
}

InstrumentBatchMessage::~InstrumentBatchMessage() {
  // @@protoc_insertion_point(destructor:ctp.InstrumentBatchMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InstrumentBatchMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InstrumentBatchMessage::ArenaDtor(void* object) {
  InstrumentBatchMessage* _this = reinterpret_cast< InstrumentBatchMessage* >(object);
  (void)_this;
}
void InstrumentBatchMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InstrumentBatchMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InstrumentBatchMessage& InstrumentBatchMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InstrumentBatchMessage_instrument_2eproto.base);
  return *internal_default_instance();
}


void InstrumentBatchMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ctp.InstrumentBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instruments_.Clear();
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InstrumentBatchMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ctp.InstrumentMessage instruments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instruments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ctp.InstrumentBatchMessage.message_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InstrumentBatchMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ctp.InstrumentBatchMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ctp.InstrumentMessage instruments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instruments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_instruments(i), target, stream);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ctp.InstrumentBatchMessage.message_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ctp.InstrumentBatchMessage)
  return target;
}

size_t InstrumentBatchMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ctp.InstrumentBatchMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ctp.InstrumentMessage instruments = 1;
  total_size += 1UL * this->_internal_instruments_size();
  for (const auto& msg : this->instruments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_type = 3;
  if (this->message_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_type());
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InstrumentBatchMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ctp.InstrumentBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InstrumentBatchMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InstrumentBatchMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ctp.InstrumentBatchMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ctp.InstrumentBatchMessage)
    MergeFrom(*source);
  }
}

void InstrumentBatchMessage::MergeFrom(const InstrumentBatchMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ctp.InstrumentBatchMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instruments_.MergeFrom(from.instruments_);
  if (from.message_type().size() > 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void InstrumentBatchMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ctp.InstrumentBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentBatchMessage::CopyFrom(const InstrumentBatchMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ctp.InstrumentBatchMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentBatchMessage::IsInitialized() const {
  return true;
}

void InstrumentBatchMessage::InternalSwap(InstrumentBatchMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  instruments_.InternalSwap(&other->instruments_);
  message_type_.Swap(&other->message_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InstrumentBatchMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ctp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ctp::InstrumentMessage* Arena::CreateMaybeMessage< ::ctp::InstrumentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctp::InstrumentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ctp::InstrumentBatchMessage* Arena::CreateMaybeMessage< ::ctp::InstrumentBatchMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ctp::InstrumentBatchMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
