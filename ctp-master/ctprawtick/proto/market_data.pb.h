// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: market_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_market_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_market_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_market_5fdata_2eproto;
namespace ctp {
class MarketDataBatchMessage;
class MarketDataBatchMessageDefaultTypeInternal;
extern MarketDataBatchMessageDefaultTypeInternal _MarketDataBatchMessage_default_instance_;
class MarketDataMessage;
class MarketDataMessageDefaultTypeInternal;
extern MarketDataMessageDefaultTypeInternal _MarketDataMessage_default_instance_;
}  // namespace ctp
PROTOBUF_NAMESPACE_OPEN
template<> ::ctp::MarketDataBatchMessage* Arena::CreateMaybeMessage<::ctp::MarketDataBatchMessage>(Arena*);
template<> ::ctp::MarketDataMessage* Arena::CreateMaybeMessage<::ctp::MarketDataMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ctp {

// ===================================================================

class MarketDataMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ctp.MarketDataMessage) */ {
 public:
  inline MarketDataMessage() : MarketDataMessage(nullptr) {};
  virtual ~MarketDataMessage();

  MarketDataMessage(const MarketDataMessage& from);
  MarketDataMessage(MarketDataMessage&& from) noexcept
    : MarketDataMessage() {
    *this = ::std::move(from);
  }

  inline MarketDataMessage& operator=(const MarketDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataMessage& operator=(MarketDataMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataMessage* internal_default_instance() {
    return reinterpret_cast<const MarketDataMessage*>(
               &_MarketDataMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MarketDataMessage& a, MarketDataMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataMessage* New() const final {
    return CreateMaybeMessage<MarketDataMessage>(nullptr);
  }

  MarketDataMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataMessage& from);
  void MergeFrom(const MarketDataMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ctp.MarketDataMessage";
  }
  protected:
  explicit MarketDataMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingDayFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kExchangeIdFieldNumber = 3,
    kExchangeInstIdFieldNumber = 4,
    kUpdateTimeFieldNumber = 21,
    kActionDayFieldNumber = 44,
    kLocalTimestampFieldNumber = 45,
    kLastPriceFieldNumber = 5,
    kPreSettlementPriceFieldNumber = 6,
    kPreClosePriceFieldNumber = 7,
    kPreOpenInterestFieldNumber = 8,
    kOpenPriceFieldNumber = 9,
    kHighestPriceFieldNumber = 10,
    kLowestPriceFieldNumber = 11,
    kTurnoverFieldNumber = 13,
    kOpenInterestFieldNumber = 14,
    kClosePriceFieldNumber = 15,
    kSettlementPriceFieldNumber = 16,
    kUpperLimitPriceFieldNumber = 17,
    kVolumeFieldNumber = 12,
    kUpdateMillisecFieldNumber = 22,
    kLowerLimitPriceFieldNumber = 18,
    kPreDeltaFieldNumber = 19,
    kCurrDeltaFieldNumber = 20,
    kBidPrice1FieldNumber = 23,
    kAskPrice1FieldNumber = 25,
    kBidVolume1FieldNumber = 24,
    kAskVolume1FieldNumber = 26,
    kBidPrice2FieldNumber = 27,
    kAskPrice2FieldNumber = 29,
    kBidVolume2FieldNumber = 28,
    kAskVolume2FieldNumber = 30,
    kBidPrice3FieldNumber = 31,
    kAskPrice3FieldNumber = 33,
    kBidVolume3FieldNumber = 32,
    kAskVolume3FieldNumber = 34,
    kBidPrice4FieldNumber = 35,
    kAskPrice4FieldNumber = 37,
    kBidVolume4FieldNumber = 36,
    kAskVolume4FieldNumber = 38,
    kBidPrice5FieldNumber = 39,
    kAskPrice5FieldNumber = 41,
    kBidVolume5FieldNumber = 40,
    kAskVolume5FieldNumber = 42,
    kAveragePriceFieldNumber = 43,
    kTimestampFieldNumber = 46,
  };
  // string trading_day = 1;
  void clear_trading_day();
  const std::string& trading_day() const;
  void set_trading_day(const std::string& value);
  void set_trading_day(std::string&& value);
  void set_trading_day(const char* value);
  void set_trading_day(const char* value, size_t size);
  std::string* mutable_trading_day();
  std::string* release_trading_day();
  void set_allocated_trading_day(std::string* trading_day);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trading_day();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trading_day(
      std::string* trading_day);
  private:
  const std::string& _internal_trading_day() const;
  void _internal_set_trading_day(const std::string& value);
  std::string* _internal_mutable_trading_day();
  public:

  // string instrument_id = 2;
  void clear_instrument_id();
  const std::string& instrument_id() const;
  void set_instrument_id(const std::string& value);
  void set_instrument_id(std::string&& value);
  void set_instrument_id(const char* value);
  void set_instrument_id(const char* value, size_t size);
  std::string* mutable_instrument_id();
  std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* instrument_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_instrument_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_instrument_id(
      std::string* instrument_id);
  private:
  const std::string& _internal_instrument_id() const;
  void _internal_set_instrument_id(const std::string& value);
  std::string* _internal_mutable_instrument_id();
  public:

  // string exchange_id = 3;
  void clear_exchange_id();
  const std::string& exchange_id() const;
  void set_exchange_id(const std::string& value);
  void set_exchange_id(std::string&& value);
  void set_exchange_id(const char* value);
  void set_exchange_id(const char* value, size_t size);
  std::string* mutable_exchange_id();
  std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* exchange_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_id(
      std::string* exchange_id);
  private:
  const std::string& _internal_exchange_id() const;
  void _internal_set_exchange_id(const std::string& value);
  std::string* _internal_mutable_exchange_id();
  public:

  // string exchange_inst_id = 4;
  void clear_exchange_inst_id();
  const std::string& exchange_inst_id() const;
  void set_exchange_inst_id(const std::string& value);
  void set_exchange_inst_id(std::string&& value);
  void set_exchange_inst_id(const char* value);
  void set_exchange_inst_id(const char* value, size_t size);
  std::string* mutable_exchange_inst_id();
  std::string* release_exchange_inst_id();
  void set_allocated_exchange_inst_id(std::string* exchange_inst_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exchange_inst_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exchange_inst_id(
      std::string* exchange_inst_id);
  private:
  const std::string& _internal_exchange_inst_id() const;
  void _internal_set_exchange_inst_id(const std::string& value);
  std::string* _internal_mutable_exchange_inst_id();
  public:

  // string update_time = 21;
  void clear_update_time();
  const std::string& update_time() const;
  void set_update_time(const std::string& value);
  void set_update_time(std::string&& value);
  void set_update_time(const char* value);
  void set_update_time(const char* value, size_t size);
  std::string* mutable_update_time();
  std::string* release_update_time();
  void set_allocated_update_time(std::string* update_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_update_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_update_time(
      std::string* update_time);
  private:
  const std::string& _internal_update_time() const;
  void _internal_set_update_time(const std::string& value);
  std::string* _internal_mutable_update_time();
  public:

  // string action_day = 44;
  void clear_action_day();
  const std::string& action_day() const;
  void set_action_day(const std::string& value);
  void set_action_day(std::string&& value);
  void set_action_day(const char* value);
  void set_action_day(const char* value, size_t size);
  std::string* mutable_action_day();
  std::string* release_action_day();
  void set_allocated_action_day(std::string* action_day);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_action_day();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_action_day(
      std::string* action_day);
  private:
  const std::string& _internal_action_day() const;
  void _internal_set_action_day(const std::string& value);
  std::string* _internal_mutable_action_day();
  public:

  // string local_timestamp = 45;
  void clear_local_timestamp();
  const std::string& local_timestamp() const;
  void set_local_timestamp(const std::string& value);
  void set_local_timestamp(std::string&& value);
  void set_local_timestamp(const char* value);
  void set_local_timestamp(const char* value, size_t size);
  std::string* mutable_local_timestamp();
  std::string* release_local_timestamp();
  void set_allocated_local_timestamp(std::string* local_timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_local_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_local_timestamp(
      std::string* local_timestamp);
  private:
  const std::string& _internal_local_timestamp() const;
  void _internal_set_local_timestamp(const std::string& value);
  std::string* _internal_mutable_local_timestamp();
  public:

  // double last_price = 5;
  void clear_last_price();
  double last_price() const;
  void set_last_price(double value);
  private:
  double _internal_last_price() const;
  void _internal_set_last_price(double value);
  public:

  // double pre_settlement_price = 6;
  void clear_pre_settlement_price();
  double pre_settlement_price() const;
  void set_pre_settlement_price(double value);
  private:
  double _internal_pre_settlement_price() const;
  void _internal_set_pre_settlement_price(double value);
  public:

  // double pre_close_price = 7;
  void clear_pre_close_price();
  double pre_close_price() const;
  void set_pre_close_price(double value);
  private:
  double _internal_pre_close_price() const;
  void _internal_set_pre_close_price(double value);
  public:

  // double pre_open_interest = 8;
  void clear_pre_open_interest();
  double pre_open_interest() const;
  void set_pre_open_interest(double value);
  private:
  double _internal_pre_open_interest() const;
  void _internal_set_pre_open_interest(double value);
  public:

  // double open_price = 9;
  void clear_open_price();
  double open_price() const;
  void set_open_price(double value);
  private:
  double _internal_open_price() const;
  void _internal_set_open_price(double value);
  public:

  // double highest_price = 10;
  void clear_highest_price();
  double highest_price() const;
  void set_highest_price(double value);
  private:
  double _internal_highest_price() const;
  void _internal_set_highest_price(double value);
  public:

  // double lowest_price = 11;
  void clear_lowest_price();
  double lowest_price() const;
  void set_lowest_price(double value);
  private:
  double _internal_lowest_price() const;
  void _internal_set_lowest_price(double value);
  public:

  // double turnover = 13;
  void clear_turnover();
  double turnover() const;
  void set_turnover(double value);
  private:
  double _internal_turnover() const;
  void _internal_set_turnover(double value);
  public:

  // double open_interest = 14;
  void clear_open_interest();
  double open_interest() const;
  void set_open_interest(double value);
  private:
  double _internal_open_interest() const;
  void _internal_set_open_interest(double value);
  public:

  // double close_price = 15;
  void clear_close_price();
  double close_price() const;
  void set_close_price(double value);
  private:
  double _internal_close_price() const;
  void _internal_set_close_price(double value);
  public:

  // double settlement_price = 16;
  void clear_settlement_price();
  double settlement_price() const;
  void set_settlement_price(double value);
  private:
  double _internal_settlement_price() const;
  void _internal_set_settlement_price(double value);
  public:

  // double upper_limit_price = 17;
  void clear_upper_limit_price();
  double upper_limit_price() const;
  void set_upper_limit_price(double value);
  private:
  double _internal_upper_limit_price() const;
  void _internal_set_upper_limit_price(double value);
  public:

  // int32 volume = 12;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 update_millisec = 22;
  void clear_update_millisec();
  ::PROTOBUF_NAMESPACE_ID::int32 update_millisec() const;
  void set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_update_millisec() const;
  void _internal_set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double lower_limit_price = 18;
  void clear_lower_limit_price();
  double lower_limit_price() const;
  void set_lower_limit_price(double value);
  private:
  double _internal_lower_limit_price() const;
  void _internal_set_lower_limit_price(double value);
  public:

  // double pre_delta = 19;
  void clear_pre_delta();
  double pre_delta() const;
  void set_pre_delta(double value);
  private:
  double _internal_pre_delta() const;
  void _internal_set_pre_delta(double value);
  public:

  // double curr_delta = 20;
  void clear_curr_delta();
  double curr_delta() const;
  void set_curr_delta(double value);
  private:
  double _internal_curr_delta() const;
  void _internal_set_curr_delta(double value);
  public:

  // double bid_price1 = 23;
  void clear_bid_price1();
  double bid_price1() const;
  void set_bid_price1(double value);
  private:
  double _internal_bid_price1() const;
  void _internal_set_bid_price1(double value);
  public:

  // double ask_price1 = 25;
  void clear_ask_price1();
  double ask_price1() const;
  void set_ask_price1(double value);
  private:
  double _internal_ask_price1() const;
  void _internal_set_ask_price1(double value);
  public:

  // int32 bid_volume1 = 24;
  void clear_bid_volume1();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume1() const;
  void set_bid_volume1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_volume1() const;
  void _internal_set_bid_volume1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ask_volume1 = 26;
  void clear_ask_volume1();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume1() const;
  void set_ask_volume1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_volume1() const;
  void _internal_set_ask_volume1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double bid_price2 = 27;
  void clear_bid_price2();
  double bid_price2() const;
  void set_bid_price2(double value);
  private:
  double _internal_bid_price2() const;
  void _internal_set_bid_price2(double value);
  public:

  // double ask_price2 = 29;
  void clear_ask_price2();
  double ask_price2() const;
  void set_ask_price2(double value);
  private:
  double _internal_ask_price2() const;
  void _internal_set_ask_price2(double value);
  public:

  // int32 bid_volume2 = 28;
  void clear_bid_volume2();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume2() const;
  void set_bid_volume2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_volume2() const;
  void _internal_set_bid_volume2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ask_volume2 = 30;
  void clear_ask_volume2();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume2() const;
  void set_ask_volume2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_volume2() const;
  void _internal_set_ask_volume2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double bid_price3 = 31;
  void clear_bid_price3();
  double bid_price3() const;
  void set_bid_price3(double value);
  private:
  double _internal_bid_price3() const;
  void _internal_set_bid_price3(double value);
  public:

  // double ask_price3 = 33;
  void clear_ask_price3();
  double ask_price3() const;
  void set_ask_price3(double value);
  private:
  double _internal_ask_price3() const;
  void _internal_set_ask_price3(double value);
  public:

  // int32 bid_volume3 = 32;
  void clear_bid_volume3();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume3() const;
  void set_bid_volume3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_volume3() const;
  void _internal_set_bid_volume3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ask_volume3 = 34;
  void clear_ask_volume3();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume3() const;
  void set_ask_volume3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_volume3() const;
  void _internal_set_ask_volume3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double bid_price4 = 35;
  void clear_bid_price4();
  double bid_price4() const;
  void set_bid_price4(double value);
  private:
  double _internal_bid_price4() const;
  void _internal_set_bid_price4(double value);
  public:

  // double ask_price4 = 37;
  void clear_ask_price4();
  double ask_price4() const;
  void set_ask_price4(double value);
  private:
  double _internal_ask_price4() const;
  void _internal_set_ask_price4(double value);
  public:

  // int32 bid_volume4 = 36;
  void clear_bid_volume4();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume4() const;
  void set_bid_volume4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_volume4() const;
  void _internal_set_bid_volume4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ask_volume4 = 38;
  void clear_ask_volume4();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume4() const;
  void set_ask_volume4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_volume4() const;
  void _internal_set_ask_volume4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double bid_price5 = 39;
  void clear_bid_price5();
  double bid_price5() const;
  void set_bid_price5(double value);
  private:
  double _internal_bid_price5() const;
  void _internal_set_bid_price5(double value);
  public:

  // double ask_price5 = 41;
  void clear_ask_price5();
  double ask_price5() const;
  void set_ask_price5(double value);
  private:
  double _internal_ask_price5() const;
  void _internal_set_ask_price5(double value);
  public:

  // int32 bid_volume5 = 40;
  void clear_bid_volume5();
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume5() const;
  void set_bid_volume5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bid_volume5() const;
  void _internal_set_bid_volume5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ask_volume5 = 42;
  void clear_ask_volume5();
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume5() const;
  void set_ask_volume5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ask_volume5() const;
  void _internal_set_ask_volume5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double average_price = 43;
  void clear_average_price();
  double average_price() const;
  void set_average_price(double value);
  private:
  double _internal_average_price() const;
  void _internal_set_average_price(double value);
  public:

  // int64 timestamp = 46;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ctp.MarketDataMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_inst_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_day_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_timestamp_;
  double last_price_;
  double pre_settlement_price_;
  double pre_close_price_;
  double pre_open_interest_;
  double open_price_;
  double highest_price_;
  double lowest_price_;
  double turnover_;
  double open_interest_;
  double close_price_;
  double settlement_price_;
  double upper_limit_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 update_millisec_;
  double lower_limit_price_;
  double pre_delta_;
  double curr_delta_;
  double bid_price1_;
  double ask_price1_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume1_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume1_;
  double bid_price2_;
  double ask_price2_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume2_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume2_;
  double bid_price3_;
  double ask_price3_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume3_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume3_;
  double bid_price4_;
  double ask_price4_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume4_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume4_;
  double bid_price5_;
  double ask_price5_;
  ::PROTOBUF_NAMESPACE_ID::int32 bid_volume5_;
  ::PROTOBUF_NAMESPACE_ID::int32 ask_volume5_;
  double average_price_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataBatchMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ctp.MarketDataBatchMessage) */ {
 public:
  inline MarketDataBatchMessage() : MarketDataBatchMessage(nullptr) {};
  virtual ~MarketDataBatchMessage();

  MarketDataBatchMessage(const MarketDataBatchMessage& from);
  MarketDataBatchMessage(MarketDataBatchMessage&& from) noexcept
    : MarketDataBatchMessage() {
    *this = ::std::move(from);
  }

  inline MarketDataBatchMessage& operator=(const MarketDataBatchMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataBatchMessage& operator=(MarketDataBatchMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MarketDataBatchMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketDataBatchMessage* internal_default_instance() {
    return reinterpret_cast<const MarketDataBatchMessage*>(
               &_MarketDataBatchMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketDataBatchMessage& a, MarketDataBatchMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDataBatchMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataBatchMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MarketDataBatchMessage* New() const final {
    return CreateMaybeMessage<MarketDataBatchMessage>(nullptr);
  }

  MarketDataBatchMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MarketDataBatchMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MarketDataBatchMessage& from);
  void MergeFrom(const MarketDataBatchMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDataBatchMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ctp.MarketDataBatchMessage";
  }
  protected:
  explicit MarketDataBatchMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_market_5fdata_2eproto);
    return ::descriptor_table_market_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDataFieldNumber = 1,
    kMessageTypeFieldNumber = 3,
    kTimestampFieldNumber = 2,
  };
  // repeated .ctp.MarketDataMessage market_data = 1;
  int market_data_size() const;
  private:
  int _internal_market_data_size() const;
  public:
  void clear_market_data();
  ::ctp::MarketDataMessage* mutable_market_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::MarketDataMessage >*
      mutable_market_data();
  private:
  const ::ctp::MarketDataMessage& _internal_market_data(int index) const;
  ::ctp::MarketDataMessage* _internal_add_market_data();
  public:
  const ::ctp::MarketDataMessage& market_data(int index) const;
  ::ctp::MarketDataMessage* add_market_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::MarketDataMessage >&
      market_data() const;

  // string message_type = 3;
  void clear_message_type();
  const std::string& message_type() const;
  void set_message_type(const std::string& value);
  void set_message_type(std::string&& value);
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  std::string* mutable_message_type();
  std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_type(
      std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:ctp.MarketDataBatchMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::MarketDataMessage > market_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_market_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MarketDataMessage

// string trading_day = 1;
inline void MarketDataMessage::clear_trading_day() {
  trading_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::trading_day() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.trading_day)
  return _internal_trading_day();
}
inline void MarketDataMessage::set_trading_day(const std::string& value) {
  _internal_set_trading_day(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.trading_day)
}
inline std::string* MarketDataMessage::mutable_trading_day() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.trading_day)
  return _internal_mutable_trading_day();
}
inline const std::string& MarketDataMessage::_internal_trading_day() const {
  return trading_day_.Get();
}
inline void MarketDataMessage::_internal_set_trading_day(const std::string& value) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_trading_day(std::string&& value) {
  
  trading_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.trading_day)
}
inline void MarketDataMessage::set_trading_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.trading_day)
}
inline void MarketDataMessage::set_trading_day(const char* value,
    size_t size) {
  
  trading_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.trading_day)
}
inline std::string* MarketDataMessage::_internal_mutable_trading_day() {
  
  return trading_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_trading_day() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.trading_day)
  return trading_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_trading_day(std::string* trading_day) {
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.trading_day)
}
inline std::string* MarketDataMessage::unsafe_arena_release_trading_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.trading_day)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trading_day_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_trading_day(
    std::string* trading_day) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trading_day != nullptr) {
    
  } else {
    
  }
  trading_day_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trading_day, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.trading_day)
}

// string instrument_id = 2;
inline void MarketDataMessage::clear_instrument_id() {
  instrument_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::instrument_id() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.instrument_id)
  return _internal_instrument_id();
}
inline void MarketDataMessage::set_instrument_id(const std::string& value) {
  _internal_set_instrument_id(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.instrument_id)
}
inline std::string* MarketDataMessage::mutable_instrument_id() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.instrument_id)
  return _internal_mutable_instrument_id();
}
inline const std::string& MarketDataMessage::_internal_instrument_id() const {
  return instrument_id_.Get();
}
inline void MarketDataMessage::_internal_set_instrument_id(const std::string& value) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_instrument_id(std::string&& value) {
  
  instrument_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.instrument_id)
}
inline void MarketDataMessage::set_instrument_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.instrument_id)
}
inline void MarketDataMessage::set_instrument_id(const char* value,
    size_t size) {
  
  instrument_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.instrument_id)
}
inline std::string* MarketDataMessage::_internal_mutable_instrument_id() {
  
  return instrument_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_instrument_id() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.instrument_id)
  return instrument_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_instrument_id(std::string* instrument_id) {
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), instrument_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.instrument_id)
}
inline std::string* MarketDataMessage::unsafe_arena_release_instrument_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.instrument_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return instrument_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_instrument_id(
    std::string* instrument_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (instrument_id != nullptr) {
    
  } else {
    
  }
  instrument_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      instrument_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.instrument_id)
}

// string exchange_id = 3;
inline void MarketDataMessage::clear_exchange_id() {
  exchange_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::exchange_id() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.exchange_id)
  return _internal_exchange_id();
}
inline void MarketDataMessage::set_exchange_id(const std::string& value) {
  _internal_set_exchange_id(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.exchange_id)
}
inline std::string* MarketDataMessage::mutable_exchange_id() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.exchange_id)
  return _internal_mutable_exchange_id();
}
inline const std::string& MarketDataMessage::_internal_exchange_id() const {
  return exchange_id_.Get();
}
inline void MarketDataMessage::_internal_set_exchange_id(const std::string& value) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_exchange_id(std::string&& value) {
  
  exchange_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.exchange_id)
}
inline void MarketDataMessage::set_exchange_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.exchange_id)
}
inline void MarketDataMessage::set_exchange_id(const char* value,
    size_t size) {
  
  exchange_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.exchange_id)
}
inline std::string* MarketDataMessage::_internal_mutable_exchange_id() {
  
  return exchange_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_exchange_id() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.exchange_id)
  return exchange_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_exchange_id(std::string* exchange_id) {
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.exchange_id)
}
inline std::string* MarketDataMessage::unsafe_arena_release_exchange_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.exchange_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_exchange_id(
    std::string* exchange_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_id != nullptr) {
    
  } else {
    
  }
  exchange_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.exchange_id)
}

// string exchange_inst_id = 4;
inline void MarketDataMessage::clear_exchange_inst_id() {
  exchange_inst_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::exchange_inst_id() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.exchange_inst_id)
  return _internal_exchange_inst_id();
}
inline void MarketDataMessage::set_exchange_inst_id(const std::string& value) {
  _internal_set_exchange_inst_id(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.exchange_inst_id)
}
inline std::string* MarketDataMessage::mutable_exchange_inst_id() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.exchange_inst_id)
  return _internal_mutable_exchange_inst_id();
}
inline const std::string& MarketDataMessage::_internal_exchange_inst_id() const {
  return exchange_inst_id_.Get();
}
inline void MarketDataMessage::_internal_set_exchange_inst_id(const std::string& value) {
  
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_exchange_inst_id(std::string&& value) {
  
  exchange_inst_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.exchange_inst_id)
}
inline void MarketDataMessage::set_exchange_inst_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.exchange_inst_id)
}
inline void MarketDataMessage::set_exchange_inst_id(const char* value,
    size_t size) {
  
  exchange_inst_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.exchange_inst_id)
}
inline std::string* MarketDataMessage::_internal_mutable_exchange_inst_id() {
  
  return exchange_inst_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_exchange_inst_id() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.exchange_inst_id)
  return exchange_inst_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_exchange_inst_id(std::string* exchange_inst_id) {
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange_inst_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.exchange_inst_id)
}
inline std::string* MarketDataMessage::unsafe_arena_release_exchange_inst_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.exchange_inst_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return exchange_inst_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_exchange_inst_id(
    std::string* exchange_inst_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exchange_inst_id != nullptr) {
    
  } else {
    
  }
  exchange_inst_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exchange_inst_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.exchange_inst_id)
}

// double last_price = 5;
inline void MarketDataMessage::clear_last_price() {
  last_price_ = 0;
}
inline double MarketDataMessage::_internal_last_price() const {
  return last_price_;
}
inline double MarketDataMessage::last_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.last_price)
  return _internal_last_price();
}
inline void MarketDataMessage::_internal_set_last_price(double value) {
  
  last_price_ = value;
}
inline void MarketDataMessage::set_last_price(double value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.last_price)
}

// double pre_settlement_price = 6;
inline void MarketDataMessage::clear_pre_settlement_price() {
  pre_settlement_price_ = 0;
}
inline double MarketDataMessage::_internal_pre_settlement_price() const {
  return pre_settlement_price_;
}
inline double MarketDataMessage::pre_settlement_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.pre_settlement_price)
  return _internal_pre_settlement_price();
}
inline void MarketDataMessage::_internal_set_pre_settlement_price(double value) {
  
  pre_settlement_price_ = value;
}
inline void MarketDataMessage::set_pre_settlement_price(double value) {
  _internal_set_pre_settlement_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.pre_settlement_price)
}

// double pre_close_price = 7;
inline void MarketDataMessage::clear_pre_close_price() {
  pre_close_price_ = 0;
}
inline double MarketDataMessage::_internal_pre_close_price() const {
  return pre_close_price_;
}
inline double MarketDataMessage::pre_close_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.pre_close_price)
  return _internal_pre_close_price();
}
inline void MarketDataMessage::_internal_set_pre_close_price(double value) {
  
  pre_close_price_ = value;
}
inline void MarketDataMessage::set_pre_close_price(double value) {
  _internal_set_pre_close_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.pre_close_price)
}

// double pre_open_interest = 8;
inline void MarketDataMessage::clear_pre_open_interest() {
  pre_open_interest_ = 0;
}
inline double MarketDataMessage::_internal_pre_open_interest() const {
  return pre_open_interest_;
}
inline double MarketDataMessage::pre_open_interest() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.pre_open_interest)
  return _internal_pre_open_interest();
}
inline void MarketDataMessage::_internal_set_pre_open_interest(double value) {
  
  pre_open_interest_ = value;
}
inline void MarketDataMessage::set_pre_open_interest(double value) {
  _internal_set_pre_open_interest(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.pre_open_interest)
}

// double open_price = 9;
inline void MarketDataMessage::clear_open_price() {
  open_price_ = 0;
}
inline double MarketDataMessage::_internal_open_price() const {
  return open_price_;
}
inline double MarketDataMessage::open_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.open_price)
  return _internal_open_price();
}
inline void MarketDataMessage::_internal_set_open_price(double value) {
  
  open_price_ = value;
}
inline void MarketDataMessage::set_open_price(double value) {
  _internal_set_open_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.open_price)
}

// double highest_price = 10;
inline void MarketDataMessage::clear_highest_price() {
  highest_price_ = 0;
}
inline double MarketDataMessage::_internal_highest_price() const {
  return highest_price_;
}
inline double MarketDataMessage::highest_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.highest_price)
  return _internal_highest_price();
}
inline void MarketDataMessage::_internal_set_highest_price(double value) {
  
  highest_price_ = value;
}
inline void MarketDataMessage::set_highest_price(double value) {
  _internal_set_highest_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.highest_price)
}

// double lowest_price = 11;
inline void MarketDataMessage::clear_lowest_price() {
  lowest_price_ = 0;
}
inline double MarketDataMessage::_internal_lowest_price() const {
  return lowest_price_;
}
inline double MarketDataMessage::lowest_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.lowest_price)
  return _internal_lowest_price();
}
inline void MarketDataMessage::_internal_set_lowest_price(double value) {
  
  lowest_price_ = value;
}
inline void MarketDataMessage::set_lowest_price(double value) {
  _internal_set_lowest_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.lowest_price)
}

// int32 volume = 12;
inline void MarketDataMessage::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::volume() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.volume)
  return _internal_volume();
}
inline void MarketDataMessage::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
}
inline void MarketDataMessage::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.volume)
}

// double turnover = 13;
inline void MarketDataMessage::clear_turnover() {
  turnover_ = 0;
}
inline double MarketDataMessage::_internal_turnover() const {
  return turnover_;
}
inline double MarketDataMessage::turnover() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.turnover)
  return _internal_turnover();
}
inline void MarketDataMessage::_internal_set_turnover(double value) {
  
  turnover_ = value;
}
inline void MarketDataMessage::set_turnover(double value) {
  _internal_set_turnover(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.turnover)
}

// double open_interest = 14;
inline void MarketDataMessage::clear_open_interest() {
  open_interest_ = 0;
}
inline double MarketDataMessage::_internal_open_interest() const {
  return open_interest_;
}
inline double MarketDataMessage::open_interest() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.open_interest)
  return _internal_open_interest();
}
inline void MarketDataMessage::_internal_set_open_interest(double value) {
  
  open_interest_ = value;
}
inline void MarketDataMessage::set_open_interest(double value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.open_interest)
}

// double close_price = 15;
inline void MarketDataMessage::clear_close_price() {
  close_price_ = 0;
}
inline double MarketDataMessage::_internal_close_price() const {
  return close_price_;
}
inline double MarketDataMessage::close_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.close_price)
  return _internal_close_price();
}
inline void MarketDataMessage::_internal_set_close_price(double value) {
  
  close_price_ = value;
}
inline void MarketDataMessage::set_close_price(double value) {
  _internal_set_close_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.close_price)
}

// double settlement_price = 16;
inline void MarketDataMessage::clear_settlement_price() {
  settlement_price_ = 0;
}
inline double MarketDataMessage::_internal_settlement_price() const {
  return settlement_price_;
}
inline double MarketDataMessage::settlement_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.settlement_price)
  return _internal_settlement_price();
}
inline void MarketDataMessage::_internal_set_settlement_price(double value) {
  
  settlement_price_ = value;
}
inline void MarketDataMessage::set_settlement_price(double value) {
  _internal_set_settlement_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.settlement_price)
}

// double upper_limit_price = 17;
inline void MarketDataMessage::clear_upper_limit_price() {
  upper_limit_price_ = 0;
}
inline double MarketDataMessage::_internal_upper_limit_price() const {
  return upper_limit_price_;
}
inline double MarketDataMessage::upper_limit_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.upper_limit_price)
  return _internal_upper_limit_price();
}
inline void MarketDataMessage::_internal_set_upper_limit_price(double value) {
  
  upper_limit_price_ = value;
}
inline void MarketDataMessage::set_upper_limit_price(double value) {
  _internal_set_upper_limit_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.upper_limit_price)
}

// double lower_limit_price = 18;
inline void MarketDataMessage::clear_lower_limit_price() {
  lower_limit_price_ = 0;
}
inline double MarketDataMessage::_internal_lower_limit_price() const {
  return lower_limit_price_;
}
inline double MarketDataMessage::lower_limit_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.lower_limit_price)
  return _internal_lower_limit_price();
}
inline void MarketDataMessage::_internal_set_lower_limit_price(double value) {
  
  lower_limit_price_ = value;
}
inline void MarketDataMessage::set_lower_limit_price(double value) {
  _internal_set_lower_limit_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.lower_limit_price)
}

// double pre_delta = 19;
inline void MarketDataMessage::clear_pre_delta() {
  pre_delta_ = 0;
}
inline double MarketDataMessage::_internal_pre_delta() const {
  return pre_delta_;
}
inline double MarketDataMessage::pre_delta() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.pre_delta)
  return _internal_pre_delta();
}
inline void MarketDataMessage::_internal_set_pre_delta(double value) {
  
  pre_delta_ = value;
}
inline void MarketDataMessage::set_pre_delta(double value) {
  _internal_set_pre_delta(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.pre_delta)
}

// double curr_delta = 20;
inline void MarketDataMessage::clear_curr_delta() {
  curr_delta_ = 0;
}
inline double MarketDataMessage::_internal_curr_delta() const {
  return curr_delta_;
}
inline double MarketDataMessage::curr_delta() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.curr_delta)
  return _internal_curr_delta();
}
inline void MarketDataMessage::_internal_set_curr_delta(double value) {
  
  curr_delta_ = value;
}
inline void MarketDataMessage::set_curr_delta(double value) {
  _internal_set_curr_delta(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.curr_delta)
}

// string update_time = 21;
inline void MarketDataMessage::clear_update_time() {
  update_time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::update_time() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.update_time)
  return _internal_update_time();
}
inline void MarketDataMessage::set_update_time(const std::string& value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.update_time)
}
inline std::string* MarketDataMessage::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.update_time)
  return _internal_mutable_update_time();
}
inline const std::string& MarketDataMessage::_internal_update_time() const {
  return update_time_.Get();
}
inline void MarketDataMessage::_internal_set_update_time(const std::string& value) {
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_update_time(std::string&& value) {
  
  update_time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.update_time)
}
inline void MarketDataMessage::set_update_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.update_time)
}
inline void MarketDataMessage::set_update_time(const char* value,
    size_t size) {
  
  update_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.update_time)
}
inline std::string* MarketDataMessage::_internal_mutable_update_time() {
  
  return update_time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_update_time() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.update_time)
  return update_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_update_time(std::string* update_time) {
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.update_time)
}
inline std::string* MarketDataMessage::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.update_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return update_time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_update_time(
    std::string* update_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (update_time != nullptr) {
    
  } else {
    
  }
  update_time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      update_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.update_time)
}

// int32 update_millisec = 22;
inline void MarketDataMessage::clear_update_millisec() {
  update_millisec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_update_millisec() const {
  return update_millisec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::update_millisec() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.update_millisec)
  return _internal_update_millisec();
}
inline void MarketDataMessage::_internal_set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  update_millisec_ = value;
}
inline void MarketDataMessage::set_update_millisec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_update_millisec(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.update_millisec)
}

// double bid_price1 = 23;
inline void MarketDataMessage::clear_bid_price1() {
  bid_price1_ = 0;
}
inline double MarketDataMessage::_internal_bid_price1() const {
  return bid_price1_;
}
inline double MarketDataMessage::bid_price1() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_price1)
  return _internal_bid_price1();
}
inline void MarketDataMessage::_internal_set_bid_price1(double value) {
  
  bid_price1_ = value;
}
inline void MarketDataMessage::set_bid_price1(double value) {
  _internal_set_bid_price1(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_price1)
}

// int32 bid_volume1 = 24;
inline void MarketDataMessage::clear_bid_volume1() {
  bid_volume1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_bid_volume1() const {
  return bid_volume1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::bid_volume1() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_volume1)
  return _internal_bid_volume1();
}
inline void MarketDataMessage::_internal_set_bid_volume1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_volume1_ = value;
}
inline void MarketDataMessage::set_bid_volume1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_volume1(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_volume1)
}

// double ask_price1 = 25;
inline void MarketDataMessage::clear_ask_price1() {
  ask_price1_ = 0;
}
inline double MarketDataMessage::_internal_ask_price1() const {
  return ask_price1_;
}
inline double MarketDataMessage::ask_price1() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_price1)
  return _internal_ask_price1();
}
inline void MarketDataMessage::_internal_set_ask_price1(double value) {
  
  ask_price1_ = value;
}
inline void MarketDataMessage::set_ask_price1(double value) {
  _internal_set_ask_price1(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_price1)
}

// int32 ask_volume1 = 26;
inline void MarketDataMessage::clear_ask_volume1() {
  ask_volume1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_ask_volume1() const {
  return ask_volume1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::ask_volume1() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_volume1)
  return _internal_ask_volume1();
}
inline void MarketDataMessage::_internal_set_ask_volume1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_volume1_ = value;
}
inline void MarketDataMessage::set_ask_volume1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_volume1(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_volume1)
}

// double bid_price2 = 27;
inline void MarketDataMessage::clear_bid_price2() {
  bid_price2_ = 0;
}
inline double MarketDataMessage::_internal_bid_price2() const {
  return bid_price2_;
}
inline double MarketDataMessage::bid_price2() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_price2)
  return _internal_bid_price2();
}
inline void MarketDataMessage::_internal_set_bid_price2(double value) {
  
  bid_price2_ = value;
}
inline void MarketDataMessage::set_bid_price2(double value) {
  _internal_set_bid_price2(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_price2)
}

// int32 bid_volume2 = 28;
inline void MarketDataMessage::clear_bid_volume2() {
  bid_volume2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_bid_volume2() const {
  return bid_volume2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::bid_volume2() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_volume2)
  return _internal_bid_volume2();
}
inline void MarketDataMessage::_internal_set_bid_volume2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_volume2_ = value;
}
inline void MarketDataMessage::set_bid_volume2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_volume2(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_volume2)
}

// double ask_price2 = 29;
inline void MarketDataMessage::clear_ask_price2() {
  ask_price2_ = 0;
}
inline double MarketDataMessage::_internal_ask_price2() const {
  return ask_price2_;
}
inline double MarketDataMessage::ask_price2() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_price2)
  return _internal_ask_price2();
}
inline void MarketDataMessage::_internal_set_ask_price2(double value) {
  
  ask_price2_ = value;
}
inline void MarketDataMessage::set_ask_price2(double value) {
  _internal_set_ask_price2(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_price2)
}

// int32 ask_volume2 = 30;
inline void MarketDataMessage::clear_ask_volume2() {
  ask_volume2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_ask_volume2() const {
  return ask_volume2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::ask_volume2() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_volume2)
  return _internal_ask_volume2();
}
inline void MarketDataMessage::_internal_set_ask_volume2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_volume2_ = value;
}
inline void MarketDataMessage::set_ask_volume2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_volume2(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_volume2)
}

// double bid_price3 = 31;
inline void MarketDataMessage::clear_bid_price3() {
  bid_price3_ = 0;
}
inline double MarketDataMessage::_internal_bid_price3() const {
  return bid_price3_;
}
inline double MarketDataMessage::bid_price3() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_price3)
  return _internal_bid_price3();
}
inline void MarketDataMessage::_internal_set_bid_price3(double value) {
  
  bid_price3_ = value;
}
inline void MarketDataMessage::set_bid_price3(double value) {
  _internal_set_bid_price3(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_price3)
}

// int32 bid_volume3 = 32;
inline void MarketDataMessage::clear_bid_volume3() {
  bid_volume3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_bid_volume3() const {
  return bid_volume3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::bid_volume3() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_volume3)
  return _internal_bid_volume3();
}
inline void MarketDataMessage::_internal_set_bid_volume3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_volume3_ = value;
}
inline void MarketDataMessage::set_bid_volume3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_volume3(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_volume3)
}

// double ask_price3 = 33;
inline void MarketDataMessage::clear_ask_price3() {
  ask_price3_ = 0;
}
inline double MarketDataMessage::_internal_ask_price3() const {
  return ask_price3_;
}
inline double MarketDataMessage::ask_price3() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_price3)
  return _internal_ask_price3();
}
inline void MarketDataMessage::_internal_set_ask_price3(double value) {
  
  ask_price3_ = value;
}
inline void MarketDataMessage::set_ask_price3(double value) {
  _internal_set_ask_price3(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_price3)
}

// int32 ask_volume3 = 34;
inline void MarketDataMessage::clear_ask_volume3() {
  ask_volume3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_ask_volume3() const {
  return ask_volume3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::ask_volume3() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_volume3)
  return _internal_ask_volume3();
}
inline void MarketDataMessage::_internal_set_ask_volume3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_volume3_ = value;
}
inline void MarketDataMessage::set_ask_volume3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_volume3(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_volume3)
}

// double bid_price4 = 35;
inline void MarketDataMessage::clear_bid_price4() {
  bid_price4_ = 0;
}
inline double MarketDataMessage::_internal_bid_price4() const {
  return bid_price4_;
}
inline double MarketDataMessage::bid_price4() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_price4)
  return _internal_bid_price4();
}
inline void MarketDataMessage::_internal_set_bid_price4(double value) {
  
  bid_price4_ = value;
}
inline void MarketDataMessage::set_bid_price4(double value) {
  _internal_set_bid_price4(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_price4)
}

// int32 bid_volume4 = 36;
inline void MarketDataMessage::clear_bid_volume4() {
  bid_volume4_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_bid_volume4() const {
  return bid_volume4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::bid_volume4() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_volume4)
  return _internal_bid_volume4();
}
inline void MarketDataMessage::_internal_set_bid_volume4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_volume4_ = value;
}
inline void MarketDataMessage::set_bid_volume4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_volume4(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_volume4)
}

// double ask_price4 = 37;
inline void MarketDataMessage::clear_ask_price4() {
  ask_price4_ = 0;
}
inline double MarketDataMessage::_internal_ask_price4() const {
  return ask_price4_;
}
inline double MarketDataMessage::ask_price4() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_price4)
  return _internal_ask_price4();
}
inline void MarketDataMessage::_internal_set_ask_price4(double value) {
  
  ask_price4_ = value;
}
inline void MarketDataMessage::set_ask_price4(double value) {
  _internal_set_ask_price4(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_price4)
}

// int32 ask_volume4 = 38;
inline void MarketDataMessage::clear_ask_volume4() {
  ask_volume4_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_ask_volume4() const {
  return ask_volume4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::ask_volume4() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_volume4)
  return _internal_ask_volume4();
}
inline void MarketDataMessage::_internal_set_ask_volume4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_volume4_ = value;
}
inline void MarketDataMessage::set_ask_volume4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_volume4(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_volume4)
}

// double bid_price5 = 39;
inline void MarketDataMessage::clear_bid_price5() {
  bid_price5_ = 0;
}
inline double MarketDataMessage::_internal_bid_price5() const {
  return bid_price5_;
}
inline double MarketDataMessage::bid_price5() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_price5)
  return _internal_bid_price5();
}
inline void MarketDataMessage::_internal_set_bid_price5(double value) {
  
  bid_price5_ = value;
}
inline void MarketDataMessage::set_bid_price5(double value) {
  _internal_set_bid_price5(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_price5)
}

// int32 bid_volume5 = 40;
inline void MarketDataMessage::clear_bid_volume5() {
  bid_volume5_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_bid_volume5() const {
  return bid_volume5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::bid_volume5() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.bid_volume5)
  return _internal_bid_volume5();
}
inline void MarketDataMessage::_internal_set_bid_volume5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bid_volume5_ = value;
}
inline void MarketDataMessage::set_bid_volume5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bid_volume5(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.bid_volume5)
}

// double ask_price5 = 41;
inline void MarketDataMessage::clear_ask_price5() {
  ask_price5_ = 0;
}
inline double MarketDataMessage::_internal_ask_price5() const {
  return ask_price5_;
}
inline double MarketDataMessage::ask_price5() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_price5)
  return _internal_ask_price5();
}
inline void MarketDataMessage::_internal_set_ask_price5(double value) {
  
  ask_price5_ = value;
}
inline void MarketDataMessage::set_ask_price5(double value) {
  _internal_set_ask_price5(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_price5)
}

// int32 ask_volume5 = 42;
inline void MarketDataMessage::clear_ask_volume5() {
  ask_volume5_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::_internal_ask_volume5() const {
  return ask_volume5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MarketDataMessage::ask_volume5() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.ask_volume5)
  return _internal_ask_volume5();
}
inline void MarketDataMessage::_internal_set_ask_volume5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ask_volume5_ = value;
}
inline void MarketDataMessage::set_ask_volume5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ask_volume5(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.ask_volume5)
}

// double average_price = 43;
inline void MarketDataMessage::clear_average_price() {
  average_price_ = 0;
}
inline double MarketDataMessage::_internal_average_price() const {
  return average_price_;
}
inline double MarketDataMessage::average_price() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.average_price)
  return _internal_average_price();
}
inline void MarketDataMessage::_internal_set_average_price(double value) {
  
  average_price_ = value;
}
inline void MarketDataMessage::set_average_price(double value) {
  _internal_set_average_price(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.average_price)
}

// string action_day = 44;
inline void MarketDataMessage::clear_action_day() {
  action_day_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::action_day() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.action_day)
  return _internal_action_day();
}
inline void MarketDataMessage::set_action_day(const std::string& value) {
  _internal_set_action_day(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.action_day)
}
inline std::string* MarketDataMessage::mutable_action_day() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.action_day)
  return _internal_mutable_action_day();
}
inline const std::string& MarketDataMessage::_internal_action_day() const {
  return action_day_.Get();
}
inline void MarketDataMessage::_internal_set_action_day(const std::string& value) {
  
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_action_day(std::string&& value) {
  
  action_day_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.action_day)
}
inline void MarketDataMessage::set_action_day(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.action_day)
}
inline void MarketDataMessage::set_action_day(const char* value,
    size_t size) {
  
  action_day_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.action_day)
}
inline std::string* MarketDataMessage::_internal_mutable_action_day() {
  
  return action_day_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_action_day() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.action_day)
  return action_day_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_action_day(std::string* action_day) {
  if (action_day != nullptr) {
    
  } else {
    
  }
  action_day_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action_day,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.action_day)
}
inline std::string* MarketDataMessage::unsafe_arena_release_action_day() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.action_day)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return action_day_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_action_day(
    std::string* action_day) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (action_day != nullptr) {
    
  } else {
    
  }
  action_day_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      action_day, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.action_day)
}

// string local_timestamp = 45;
inline void MarketDataMessage::clear_local_timestamp() {
  local_timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataMessage::local_timestamp() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.local_timestamp)
  return _internal_local_timestamp();
}
inline void MarketDataMessage::set_local_timestamp(const std::string& value) {
  _internal_set_local_timestamp(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.local_timestamp)
}
inline std::string* MarketDataMessage::mutable_local_timestamp() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataMessage.local_timestamp)
  return _internal_mutable_local_timestamp();
}
inline const std::string& MarketDataMessage::_internal_local_timestamp() const {
  return local_timestamp_.Get();
}
inline void MarketDataMessage::_internal_set_local_timestamp(const std::string& value) {
  
  local_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataMessage::set_local_timestamp(std::string&& value) {
  
  local_timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataMessage.local_timestamp)
}
inline void MarketDataMessage::set_local_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataMessage.local_timestamp)
}
inline void MarketDataMessage::set_local_timestamp(const char* value,
    size_t size) {
  
  local_timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataMessage.local_timestamp)
}
inline std::string* MarketDataMessage::_internal_mutable_local_timestamp() {
  
  return local_timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataMessage::release_local_timestamp() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataMessage.local_timestamp)
  return local_timestamp_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataMessage::set_allocated_local_timestamp(std::string* local_timestamp) {
  if (local_timestamp != nullptr) {
    
  } else {
    
  }
  local_timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataMessage.local_timestamp)
}
inline std::string* MarketDataMessage::unsafe_arena_release_local_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataMessage.local_timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return local_timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataMessage::unsafe_arena_set_allocated_local_timestamp(
    std::string* local_timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (local_timestamp != nullptr) {
    
  } else {
    
  }
  local_timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      local_timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataMessage.local_timestamp)
}

// int64 timestamp = 46;
inline void MarketDataMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataMessage.timestamp)
  return _internal_timestamp();
}
inline void MarketDataMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void MarketDataMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataMessage.timestamp)
}

// -------------------------------------------------------------------

// MarketDataBatchMessage

// repeated .ctp.MarketDataMessage market_data = 1;
inline int MarketDataBatchMessage::_internal_market_data_size() const {
  return market_data_.size();
}
inline int MarketDataBatchMessage::market_data_size() const {
  return _internal_market_data_size();
}
inline void MarketDataBatchMessage::clear_market_data() {
  market_data_.Clear();
}
inline ::ctp::MarketDataMessage* MarketDataBatchMessage::mutable_market_data(int index) {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataBatchMessage.market_data)
  return market_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::MarketDataMessage >*
MarketDataBatchMessage::mutable_market_data() {
  // @@protoc_insertion_point(field_mutable_list:ctp.MarketDataBatchMessage.market_data)
  return &market_data_;
}
inline const ::ctp::MarketDataMessage& MarketDataBatchMessage::_internal_market_data(int index) const {
  return market_data_.Get(index);
}
inline const ::ctp::MarketDataMessage& MarketDataBatchMessage::market_data(int index) const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataBatchMessage.market_data)
  return _internal_market_data(index);
}
inline ::ctp::MarketDataMessage* MarketDataBatchMessage::_internal_add_market_data() {
  return market_data_.Add();
}
inline ::ctp::MarketDataMessage* MarketDataBatchMessage::add_market_data() {
  // @@protoc_insertion_point(field_add:ctp.MarketDataBatchMessage.market_data)
  return _internal_add_market_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ctp::MarketDataMessage >&
MarketDataBatchMessage::market_data() const {
  // @@protoc_insertion_point(field_list:ctp.MarketDataBatchMessage.market_data)
  return market_data_;
}

// int64 timestamp = 2;
inline void MarketDataBatchMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataBatchMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MarketDataBatchMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataBatchMessage.timestamp)
  return _internal_timestamp();
}
inline void MarketDataBatchMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void MarketDataBatchMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataBatchMessage.timestamp)
}

// string message_type = 3;
inline void MarketDataBatchMessage::clear_message_type() {
  message_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MarketDataBatchMessage::message_type() const {
  // @@protoc_insertion_point(field_get:ctp.MarketDataBatchMessage.message_type)
  return _internal_message_type();
}
inline void MarketDataBatchMessage::set_message_type(const std::string& value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:ctp.MarketDataBatchMessage.message_type)
}
inline std::string* MarketDataBatchMessage::mutable_message_type() {
  // @@protoc_insertion_point(field_mutable:ctp.MarketDataBatchMessage.message_type)
  return _internal_mutable_message_type();
}
inline const std::string& MarketDataBatchMessage::_internal_message_type() const {
  return message_type_.Get();
}
inline void MarketDataBatchMessage::_internal_set_message_type(const std::string& value) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MarketDataBatchMessage::set_message_type(std::string&& value) {
  
  message_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ctp.MarketDataBatchMessage.message_type)
}
inline void MarketDataBatchMessage::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ctp.MarketDataBatchMessage.message_type)
}
inline void MarketDataBatchMessage::set_message_type(const char* value,
    size_t size) {
  
  message_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ctp.MarketDataBatchMessage.message_type)
}
inline std::string* MarketDataBatchMessage::_internal_mutable_message_type() {
  
  return message_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MarketDataBatchMessage::release_message_type() {
  // @@protoc_insertion_point(field_release:ctp.MarketDataBatchMessage.message_type)
  return message_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MarketDataBatchMessage::set_allocated_message_type(std::string* message_type) {
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ctp.MarketDataBatchMessage.message_type)
}
inline std::string* MarketDataBatchMessage::unsafe_arena_release_message_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ctp.MarketDataBatchMessage.message_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MarketDataBatchMessage::unsafe_arena_set_allocated_message_type(
    std::string* message_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_type != nullptr) {
    
  } else {
    
  }
  message_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ctp.MarketDataBatchMessage.message_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ctp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_market_5fdata_2eproto
